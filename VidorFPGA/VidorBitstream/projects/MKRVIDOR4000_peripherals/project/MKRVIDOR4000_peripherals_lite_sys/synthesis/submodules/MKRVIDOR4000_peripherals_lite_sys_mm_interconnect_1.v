// MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1 (
		input  wire        clk_clk_clk,                                  //                                clk_clk.clk
		input  wire        flash_clk_clk_clk,                            //                          flash_clk_clk.clk
		input  wire        NEOPIXEL_0_reset_reset_bridge_in_reset_reset, // NEOPIXEL_0_reset_reset_bridge_in_reset.reset
		input  wire        qspi_reset_reset_bridge_in_reset_reset,       //       qspi_reset_reset_bridge_in_reset.reset
		input  wire [31:0] NEOPIXEL_0_data_address,                      //                        NEOPIXEL_0_data.address
		output wire        NEOPIXEL_0_data_waitrequest,                  //                                       .waitrequest
		input  wire [4:0]  NEOPIXEL_0_data_burstcount,                   //                                       .burstcount
		input  wire        NEOPIXEL_0_data_read,                         //                                       .read
		output wire [31:0] NEOPIXEL_0_data_readdata,                     //                                       .readdata
		output wire        NEOPIXEL_0_data_readdatavalid,                //                                       .readdatavalid
		input  wire [23:0] nios2_gen2_0_data_master_address,             //               nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,         //                                       .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,          //                                       .byteenable
		input  wire        nios2_gen2_0_data_master_read,                //                                       .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,            //                                       .readdata
		input  wire        nios2_gen2_0_data_master_write,               //                                       .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,           //                                       .writedata
		input  wire [23:0] nios2_gen2_0_instruction_master_address,      //        nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,  //                                       .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,         //                                       .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,     //                                       .readdata
		output wire [2:0]  flash_spi_d_address,                          //                            flash_spi_d.address
		output wire        flash_spi_d_write,                            //                                       .write
		input  wire [31:0] flash_spi_d_readdata,                         //                                       .readdata
		output wire [31:0] flash_spi_d_writedata,                        //                                       .writedata
		output wire        flash_spi_d_chipselect,                       //                                       .chipselect
		output wire [2:0]  i2c_0_avalon_slave_0_address,                 //                   i2c_0_avalon_slave_0.address
		output wire        i2c_0_avalon_slave_0_write,                   //                                       .write
		input  wire [31:0] i2c_0_avalon_slave_0_readdata,                //                                       .readdata
		output wire [31:0] i2c_0_avalon_slave_0_writedata,               //                                       .writedata
		input  wire        i2c_0_avalon_slave_0_waitrequest,             //                                       .waitrequest
		output wire        i2c_0_avalon_slave_0_chipselect,              //                                       .chipselect
		output wire [2:0]  i2c_1_avalon_slave_0_address,                 //                   i2c_1_avalon_slave_0.address
		output wire        i2c_1_avalon_slave_0_write,                   //                                       .write
		input  wire [31:0] i2c_1_avalon_slave_0_readdata,                //                                       .readdata
		output wire [31:0] i2c_1_avalon_slave_0_writedata,               //                                       .writedata
		input  wire        i2c_1_avalon_slave_0_waitrequest,             //                                       .waitrequest
		output wire        i2c_1_avalon_slave_0_chipselect,              //                                       .chipselect
		output wire [2:0]  i2c_2_avalon_slave_0_address,                 //                   i2c_2_avalon_slave_0.address
		output wire        i2c_2_avalon_slave_0_write,                   //                                       .write
		input  wire [31:0] i2c_2_avalon_slave_0_readdata,                //                                       .readdata
		output wire [31:0] i2c_2_avalon_slave_0_writedata,               //                                       .writedata
		input  wire        i2c_2_avalon_slave_0_waitrequest,             //                                       .waitrequest
		output wire        i2c_2_avalon_slave_0_chipselect,              //                                       .chipselect
		output wire [2:0]  i2c_3_avalon_slave_0_address,                 //                   i2c_3_avalon_slave_0.address
		output wire        i2c_3_avalon_slave_0_write,                   //                                       .write
		input  wire [31:0] i2c_3_avalon_slave_0_readdata,                //                                       .readdata
		output wire [31:0] i2c_3_avalon_slave_0_writedata,               //                                       .writedata
		input  wire        i2c_3_avalon_slave_0_waitrequest,             //                                       .waitrequest
		output wire        i2c_3_avalon_slave_0_chipselect,              //                                       .chipselect
		output wire [8:0]  mb_slv_address,                               //                                 mb_slv.address
		output wire        mb_slv_write,                                 //                                       .write
		output wire        mb_slv_read,                                  //                                       .read
		input  wire [31:0] mb_slv_readdata,                              //                                       .readdata
		output wire [31:0] mb_slv_writedata,                             //                                       .writedata
		output wire [3:0]  NEOPIXEL_0_csr_address,                       //                         NEOPIXEL_0_csr.address
		output wire        NEOPIXEL_0_csr_write,                         //                                       .write
		output wire        NEOPIXEL_0_csr_read,                          //                                       .read
		input  wire [31:0] NEOPIXEL_0_csr_readdata,                      //                                       .readdata
		output wire [31:0] NEOPIXEL_0_csr_writedata,                     //                                       .writedata
		output wire [2:0]  nina_spi_d_address,                           //                             nina_spi_d.address
		output wire        nina_spi_d_write,                             //                                       .write
		input  wire [31:0] nina_spi_d_readdata,                          //                                       .readdata
		output wire [31:0] nina_spi_d_writedata,                         //                                       .writedata
		output wire        nina_spi_d_chipselect,                        //                                       .chipselect
		output wire [12:0] onchip_memory2_0_s1_address,                  //                    onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                    //                                       .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                 //                                       .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                //                                       .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,               //                                       .byteenable
		output wire        onchip_memory2_0_s1_chipselect,               //                                       .chipselect
		output wire        onchip_memory2_0_s1_clken,                    //                                       .clken
		output wire [12:0] onchip_memory2_0_s2_address,                  //                    onchip_memory2_0_s2.address
		output wire        onchip_memory2_0_s2_write,                    //                                       .write
		input  wire [31:0] onchip_memory2_0_s2_readdata,                 //                                       .readdata
		output wire [31:0] onchip_memory2_0_s2_writedata,                //                                       .writedata
		output wire [3:0]  onchip_memory2_0_s2_byteenable,               //                                       .byteenable
		output wire        onchip_memory2_0_s2_chipselect,               //                                       .chipselect
		output wire        onchip_memory2_0_s2_clken,                    //                                       .clken
		output wire [2:0]  pex_pio_s1_address,                           //                             pex_pio_s1.address
		output wire        pex_pio_s1_write,                             //                                       .write
		output wire        pex_pio_s1_read,                              //                                       .read
		input  wire [31:0] pex_pio_s1_readdata,                          //                                       .readdata
		output wire [31:0] pex_pio_s1_writedata,                         //                                       .writedata
		output wire [3:0]  qspi_avl_csr_address,                         //                           qspi_avl_csr.address
		output wire        qspi_avl_csr_write,                           //                                       .write
		output wire        qspi_avl_csr_read,                            //                                       .read
		input  wire [31:0] qspi_avl_csr_readdata,                        //                                       .readdata
		output wire [31:0] qspi_avl_csr_writedata,                       //                                       .writedata
		input  wire        qspi_avl_csr_readdatavalid,                   //                                       .readdatavalid
		input  wire        qspi_avl_csr_waitrequest,                     //                                       .waitrequest
		output wire [18:0] qspi_avl_mem_address,                         //                           qspi_avl_mem.address
		output wire        qspi_avl_mem_write,                           //                                       .write
		output wire        qspi_avl_mem_read,                            //                                       .read
		input  wire [31:0] qspi_avl_mem_readdata,                        //                                       .readdata
		output wire [31:0] qspi_avl_mem_writedata,                       //                                       .writedata
		output wire [6:0]  qspi_avl_mem_burstcount,                      //                                       .burstcount
		output wire [3:0]  qspi_avl_mem_byteenable,                      //                                       .byteenable
		input  wire        qspi_avl_mem_readdatavalid,                   //                                       .readdatavalid
		input  wire        qspi_avl_mem_waitrequest,                     //                                       .waitrequest
		output wire [3:0]  QUAD_ENCODER_0_avalon_slave_0_address,        //          QUAD_ENCODER_0_avalon_slave_0.address
		output wire        QUAD_ENCODER_0_avalon_slave_0_read,           //                                       .read
		input  wire [31:0] QUAD_ENCODER_0_avalon_slave_0_readdata,       //                                       .readdata
		output wire [2:0]  sam_pio_s1_address,                           //                             sam_pio_s1.address
		output wire        sam_pio_s1_write,                             //                                       .write
		output wire        sam_pio_s1_read,                              //                                       .read
		input  wire [31:0] sam_pio_s1_readdata,                          //                                       .readdata
		output wire [31:0] sam_pio_s1_writedata,                         //                                       .writedata
		output wire [4:0]  sam_pwm_avalon_slave_0_address,               //                 sam_pwm_avalon_slave_0.address
		output wire        sam_pwm_avalon_slave_0_write,                 //                                       .write
		output wire [31:0] sam_pwm_avalon_slave_0_writedata,             //                                       .writedata
		output wire [21:0] sdram_s1_address,                             //                               sdram_s1.address
		output wire        sdram_s1_write,                               //                                       .write
		output wire        sdram_s1_read,                                //                                       .read
		input  wire [15:0] sdram_s1_readdata,                            //                                       .readdata
		output wire [15:0] sdram_s1_writedata,                           //                                       .writedata
		output wire [1:0]  sdram_s1_byteenable,                          //                                       .byteenable
		input  wire        sdram_s1_readdatavalid,                       //                                       .readdatavalid
		input  wire        sdram_s1_waitrequest,                         //                                       .waitrequest
		output wire        sdram_s1_chipselect,                          //                                       .chipselect
		output wire [2:0]  timer_0_s1_address,                           //                             timer_0_s1.address
		output wire        timer_0_s1_write,                             //                                       .write
		input  wire [15:0] timer_0_s1_readdata,                          //                                       .readdata
		output wire [15:0] timer_0_s1_writedata,                         //                                       .writedata
		output wire        timer_0_s1_chipselect,                        //                                       .chipselect
		output wire [2:0]  tspi_0_d_address,                             //                               tspi_0_d.address
		output wire        tspi_0_d_write,                               //                                       .write
		input  wire [31:0] tspi_0_d_readdata,                            //                                       .readdata
		output wire [31:0] tspi_0_d_writedata,                           //                                       .writedata
		output wire        tspi_0_d_chipselect,                          //                                       .chipselect
		output wire [2:0]  tspi_1_d_address,                             //                               tspi_1_d.address
		output wire        tspi_1_d_write,                               //                                       .write
		input  wire [31:0] tspi_1_d_readdata,                            //                                       .readdata
		output wire [31:0] tspi_1_d_writedata,                           //                                       .writedata
		output wire        tspi_1_d_chipselect,                          //                                       .chipselect
		output wire [2:0]  tspi_2_d_address,                             //                               tspi_2_d.address
		output wire        tspi_2_d_write,                               //                                       .write
		input  wire [31:0] tspi_2_d_readdata,                            //                                       .readdata
		output wire [31:0] tspi_2_d_writedata,                           //                                       .writedata
		output wire        tspi_2_d_chipselect,                          //                                       .chipselect
		output wire [2:0]  tspi_3_d_address,                             //                               tspi_3_d.address
		output wire        tspi_3_d_write,                               //                                       .write
		input  wire [31:0] tspi_3_d_readdata,                            //                                       .readdata
		output wire [31:0] tspi_3_d_writedata,                           //                                       .writedata
		output wire        tspi_3_d_chipselect,                          //                                       .chipselect
		output wire [2:0]  tspi_4_d_address,                             //                               tspi_4_d.address
		output wire        tspi_4_d_write,                               //                                       .write
		input  wire [31:0] tspi_4_d_readdata,                            //                                       .readdata
		output wire [31:0] tspi_4_d_writedata,                           //                                       .writedata
		output wire        tspi_4_d_chipselect,                          //                                       .chipselect
		output wire [2:0]  wm_pio_s1_address,                            //                              wm_pio_s1.address
		output wire        wm_pio_s1_write,                              //                                       .write
		output wire        wm_pio_s1_read,                               //                                       .read
		input  wire [31:0] wm_pio_s1_readdata,                           //                                       .readdata
		output wire [31:0] wm_pio_s1_writedata                           //                                       .writedata
	);

	wire          neopixel_0_data_translator_avalon_universal_master_0_waitrequest;                   // NEOPIXEL_0_data_agent:av_waitrequest -> NEOPIXEL_0_data_translator:uav_waitrequest
	wire   [31:0] neopixel_0_data_translator_avalon_universal_master_0_readdata;                      // NEOPIXEL_0_data_agent:av_readdata -> NEOPIXEL_0_data_translator:uav_readdata
	wire          neopixel_0_data_translator_avalon_universal_master_0_debugaccess;                   // NEOPIXEL_0_data_translator:uav_debugaccess -> NEOPIXEL_0_data_agent:av_debugaccess
	wire   [31:0] neopixel_0_data_translator_avalon_universal_master_0_address;                       // NEOPIXEL_0_data_translator:uav_address -> NEOPIXEL_0_data_agent:av_address
	wire          neopixel_0_data_translator_avalon_universal_master_0_read;                          // NEOPIXEL_0_data_translator:uav_read -> NEOPIXEL_0_data_agent:av_read
	wire    [3:0] neopixel_0_data_translator_avalon_universal_master_0_byteenable;                    // NEOPIXEL_0_data_translator:uav_byteenable -> NEOPIXEL_0_data_agent:av_byteenable
	wire          neopixel_0_data_translator_avalon_universal_master_0_readdatavalid;                 // NEOPIXEL_0_data_agent:av_readdatavalid -> NEOPIXEL_0_data_translator:uav_readdatavalid
	wire          neopixel_0_data_translator_avalon_universal_master_0_lock;                          // NEOPIXEL_0_data_translator:uav_lock -> NEOPIXEL_0_data_agent:av_lock
	wire          neopixel_0_data_translator_avalon_universal_master_0_write;                         // NEOPIXEL_0_data_translator:uav_write -> NEOPIXEL_0_data_agent:av_write
	wire   [31:0] neopixel_0_data_translator_avalon_universal_master_0_writedata;                     // NEOPIXEL_0_data_translator:uav_writedata -> NEOPIXEL_0_data_agent:av_writedata
	wire    [6:0] neopixel_0_data_translator_avalon_universal_master_0_burstcount;                    // NEOPIXEL_0_data_translator:uav_burstcount -> NEOPIXEL_0_data_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> NEOPIXEL_0_data_agent:rp_valid
	wire  [123:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> NEOPIXEL_0_data_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // NEOPIXEL_0_data_agent:rp_ready -> rsp_mux:src_ready
	wire   [23:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> NEOPIXEL_0_data_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> NEOPIXEL_0_data_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> NEOPIXEL_0_data_agent:rp_endofpacket
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [123:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [23:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [123:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                              // nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [23:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                         // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                      // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                      // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                          // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                       // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                             // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                    // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                             // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                        // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                            // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                       // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                     // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire  [106:0] sdram_s1_agent_rf_source_data;                                                      // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                     // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                             // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                               // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                  // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire  [106:0] sdram_s1_agent_rsp_fifo_out_data;                                                   // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                  // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                          // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                            // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                 // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sam_pwm_avalon_slave_0_agent_m0_readdata;                                           // sam_pwm_avalon_slave_0_translator:uav_readdata -> sam_pwm_avalon_slave_0_agent:m0_readdata
	wire          sam_pwm_avalon_slave_0_agent_m0_waitrequest;                                        // sam_pwm_avalon_slave_0_translator:uav_waitrequest -> sam_pwm_avalon_slave_0_agent:m0_waitrequest
	wire          sam_pwm_avalon_slave_0_agent_m0_debugaccess;                                        // sam_pwm_avalon_slave_0_agent:m0_debugaccess -> sam_pwm_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] sam_pwm_avalon_slave_0_agent_m0_address;                                            // sam_pwm_avalon_slave_0_agent:m0_address -> sam_pwm_avalon_slave_0_translator:uav_address
	wire    [3:0] sam_pwm_avalon_slave_0_agent_m0_byteenable;                                         // sam_pwm_avalon_slave_0_agent:m0_byteenable -> sam_pwm_avalon_slave_0_translator:uav_byteenable
	wire          sam_pwm_avalon_slave_0_agent_m0_read;                                               // sam_pwm_avalon_slave_0_agent:m0_read -> sam_pwm_avalon_slave_0_translator:uav_read
	wire          sam_pwm_avalon_slave_0_agent_m0_readdatavalid;                                      // sam_pwm_avalon_slave_0_translator:uav_readdatavalid -> sam_pwm_avalon_slave_0_agent:m0_readdatavalid
	wire          sam_pwm_avalon_slave_0_agent_m0_lock;                                               // sam_pwm_avalon_slave_0_agent:m0_lock -> sam_pwm_avalon_slave_0_translator:uav_lock
	wire   [31:0] sam_pwm_avalon_slave_0_agent_m0_writedata;                                          // sam_pwm_avalon_slave_0_agent:m0_writedata -> sam_pwm_avalon_slave_0_translator:uav_writedata
	wire          sam_pwm_avalon_slave_0_agent_m0_write;                                              // sam_pwm_avalon_slave_0_agent:m0_write -> sam_pwm_avalon_slave_0_translator:uav_write
	wire    [2:0] sam_pwm_avalon_slave_0_agent_m0_burstcount;                                         // sam_pwm_avalon_slave_0_agent:m0_burstcount -> sam_pwm_avalon_slave_0_translator:uav_burstcount
	wire          sam_pwm_avalon_slave_0_agent_rf_source_valid;                                       // sam_pwm_avalon_slave_0_agent:rf_source_valid -> sam_pwm_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] sam_pwm_avalon_slave_0_agent_rf_source_data;                                        // sam_pwm_avalon_slave_0_agent:rf_source_data -> sam_pwm_avalon_slave_0_agent_rsp_fifo:in_data
	wire          sam_pwm_avalon_slave_0_agent_rf_source_ready;                                       // sam_pwm_avalon_slave_0_agent_rsp_fifo:in_ready -> sam_pwm_avalon_slave_0_agent:rf_source_ready
	wire          sam_pwm_avalon_slave_0_agent_rf_source_startofpacket;                               // sam_pwm_avalon_slave_0_agent:rf_source_startofpacket -> sam_pwm_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          sam_pwm_avalon_slave_0_agent_rf_source_endofpacket;                                 // sam_pwm_avalon_slave_0_agent:rf_source_endofpacket -> sam_pwm_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sam_pwm_avalon_slave_0_agent_rsp_fifo_out_valid;                                    // sam_pwm_avalon_slave_0_agent_rsp_fifo:out_valid -> sam_pwm_avalon_slave_0_agent:rf_sink_valid
	wire  [124:0] sam_pwm_avalon_slave_0_agent_rsp_fifo_out_data;                                     // sam_pwm_avalon_slave_0_agent_rsp_fifo:out_data -> sam_pwm_avalon_slave_0_agent:rf_sink_data
	wire          sam_pwm_avalon_slave_0_agent_rsp_fifo_out_ready;                                    // sam_pwm_avalon_slave_0_agent:rf_sink_ready -> sam_pwm_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          sam_pwm_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                            // sam_pwm_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> sam_pwm_avalon_slave_0_agent:rf_sink_startofpacket
	wire          sam_pwm_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                              // sam_pwm_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> sam_pwm_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> sam_pwm_avalon_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> sam_pwm_avalon_slave_0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // sam_pwm_avalon_slave_0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [23:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> sam_pwm_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> sam_pwm_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> sam_pwm_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] quad_encoder_0_avalon_slave_0_agent_m0_readdata;                                    // QUAD_ENCODER_0_avalon_slave_0_translator:uav_readdata -> QUAD_ENCODER_0_avalon_slave_0_agent:m0_readdata
	wire          quad_encoder_0_avalon_slave_0_agent_m0_waitrequest;                                 // QUAD_ENCODER_0_avalon_slave_0_translator:uav_waitrequest -> QUAD_ENCODER_0_avalon_slave_0_agent:m0_waitrequest
	wire          quad_encoder_0_avalon_slave_0_agent_m0_debugaccess;                                 // QUAD_ENCODER_0_avalon_slave_0_agent:m0_debugaccess -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] quad_encoder_0_avalon_slave_0_agent_m0_address;                                     // QUAD_ENCODER_0_avalon_slave_0_agent:m0_address -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_address
	wire    [3:0] quad_encoder_0_avalon_slave_0_agent_m0_byteenable;                                  // QUAD_ENCODER_0_avalon_slave_0_agent:m0_byteenable -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_byteenable
	wire          quad_encoder_0_avalon_slave_0_agent_m0_read;                                        // QUAD_ENCODER_0_avalon_slave_0_agent:m0_read -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_read
	wire          quad_encoder_0_avalon_slave_0_agent_m0_readdatavalid;                               // QUAD_ENCODER_0_avalon_slave_0_translator:uav_readdatavalid -> QUAD_ENCODER_0_avalon_slave_0_agent:m0_readdatavalid
	wire          quad_encoder_0_avalon_slave_0_agent_m0_lock;                                        // QUAD_ENCODER_0_avalon_slave_0_agent:m0_lock -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] quad_encoder_0_avalon_slave_0_agent_m0_writedata;                                   // QUAD_ENCODER_0_avalon_slave_0_agent:m0_writedata -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_writedata
	wire          quad_encoder_0_avalon_slave_0_agent_m0_write;                                       // QUAD_ENCODER_0_avalon_slave_0_agent:m0_write -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_write
	wire    [2:0] quad_encoder_0_avalon_slave_0_agent_m0_burstcount;                                  // QUAD_ENCODER_0_avalon_slave_0_agent:m0_burstcount -> QUAD_ENCODER_0_avalon_slave_0_translator:uav_burstcount
	wire          quad_encoder_0_avalon_slave_0_agent_rf_source_valid;                                // QUAD_ENCODER_0_avalon_slave_0_agent:rf_source_valid -> QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] quad_encoder_0_avalon_slave_0_agent_rf_source_data;                                 // QUAD_ENCODER_0_avalon_slave_0_agent:rf_source_data -> QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          quad_encoder_0_avalon_slave_0_agent_rf_source_ready;                                // QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:in_ready -> QUAD_ENCODER_0_avalon_slave_0_agent:rf_source_ready
	wire          quad_encoder_0_avalon_slave_0_agent_rf_source_startofpacket;                        // QUAD_ENCODER_0_avalon_slave_0_agent:rf_source_startofpacket -> QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          quad_encoder_0_avalon_slave_0_agent_rf_source_endofpacket;                          // QUAD_ENCODER_0_avalon_slave_0_agent:rf_source_endofpacket -> QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_valid;                             // QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:out_valid -> QUAD_ENCODER_0_avalon_slave_0_agent:rf_sink_valid
	wire  [124:0] quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_data;                              // QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:out_data -> QUAD_ENCODER_0_avalon_slave_0_agent:rf_sink_data
	wire          quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_ready;                             // QUAD_ENCODER_0_avalon_slave_0_agent:rf_sink_ready -> QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                     // QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> QUAD_ENCODER_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                       // QUAD_ENCODER_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> QUAD_ENCODER_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> QUAD_ENCODER_0_avalon_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> QUAD_ENCODER_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // QUAD_ENCODER_0_avalon_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [23:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> QUAD_ENCODER_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> QUAD_ENCODER_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> QUAD_ENCODER_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] i2c_0_avalon_slave_0_agent_m0_readdata;                                             // i2c_0_avalon_slave_0_translator:uav_readdata -> i2c_0_avalon_slave_0_agent:m0_readdata
	wire          i2c_0_avalon_slave_0_agent_m0_waitrequest;                                          // i2c_0_avalon_slave_0_translator:uav_waitrequest -> i2c_0_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_0_avalon_slave_0_agent_m0_debugaccess;                                          // i2c_0_avalon_slave_0_agent:m0_debugaccess -> i2c_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] i2c_0_avalon_slave_0_agent_m0_address;                                              // i2c_0_avalon_slave_0_agent:m0_address -> i2c_0_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_0_avalon_slave_0_agent_m0_byteenable;                                           // i2c_0_avalon_slave_0_agent:m0_byteenable -> i2c_0_avalon_slave_0_translator:uav_byteenable
	wire          i2c_0_avalon_slave_0_agent_m0_read;                                                 // i2c_0_avalon_slave_0_agent:m0_read -> i2c_0_avalon_slave_0_translator:uav_read
	wire          i2c_0_avalon_slave_0_agent_m0_readdatavalid;                                        // i2c_0_avalon_slave_0_translator:uav_readdatavalid -> i2c_0_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_0_avalon_slave_0_agent_m0_lock;                                                 // i2c_0_avalon_slave_0_agent:m0_lock -> i2c_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_0_avalon_slave_0_agent_m0_writedata;                                            // i2c_0_avalon_slave_0_agent:m0_writedata -> i2c_0_avalon_slave_0_translator:uav_writedata
	wire          i2c_0_avalon_slave_0_agent_m0_write;                                                // i2c_0_avalon_slave_0_agent:m0_write -> i2c_0_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_0_avalon_slave_0_agent_m0_burstcount;                                           // i2c_0_avalon_slave_0_agent:m0_burstcount -> i2c_0_avalon_slave_0_translator:uav_burstcount
	wire          i2c_0_avalon_slave_0_agent_rf_source_valid;                                         // i2c_0_avalon_slave_0_agent:rf_source_valid -> i2c_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] i2c_0_avalon_slave_0_agent_rf_source_data;                                          // i2c_0_avalon_slave_0_agent:rf_source_data -> i2c_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_0_avalon_slave_0_agent_rf_source_ready;                                         // i2c_0_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_0_avalon_slave_0_agent:rf_source_ready
	wire          i2c_0_avalon_slave_0_agent_rf_source_startofpacket;                                 // i2c_0_avalon_slave_0_agent:rf_source_startofpacket -> i2c_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_0_avalon_slave_0_agent_rf_source_endofpacket;                                   // i2c_0_avalon_slave_0_agent:rf_source_endofpacket -> i2c_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                      // i2c_0_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_0_avalon_slave_0_agent:rf_sink_valid
	wire  [124:0] i2c_0_avalon_slave_0_agent_rsp_fifo_out_data;                                       // i2c_0_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_0_avalon_slave_0_agent:rf_sink_data
	wire          i2c_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                      // i2c_0_avalon_slave_0_agent:rf_sink_ready -> i2c_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                              // i2c_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                // i2c_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> i2c_0_avalon_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> i2c_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // i2c_0_avalon_slave_0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [23:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> i2c_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> i2c_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> i2c_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] i2c_1_avalon_slave_0_agent_m0_readdata;                                             // i2c_1_avalon_slave_0_translator:uav_readdata -> i2c_1_avalon_slave_0_agent:m0_readdata
	wire          i2c_1_avalon_slave_0_agent_m0_waitrequest;                                          // i2c_1_avalon_slave_0_translator:uav_waitrequest -> i2c_1_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_1_avalon_slave_0_agent_m0_debugaccess;                                          // i2c_1_avalon_slave_0_agent:m0_debugaccess -> i2c_1_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] i2c_1_avalon_slave_0_agent_m0_address;                                              // i2c_1_avalon_slave_0_agent:m0_address -> i2c_1_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_1_avalon_slave_0_agent_m0_byteenable;                                           // i2c_1_avalon_slave_0_agent:m0_byteenable -> i2c_1_avalon_slave_0_translator:uav_byteenable
	wire          i2c_1_avalon_slave_0_agent_m0_read;                                                 // i2c_1_avalon_slave_0_agent:m0_read -> i2c_1_avalon_slave_0_translator:uav_read
	wire          i2c_1_avalon_slave_0_agent_m0_readdatavalid;                                        // i2c_1_avalon_slave_0_translator:uav_readdatavalid -> i2c_1_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_1_avalon_slave_0_agent_m0_lock;                                                 // i2c_1_avalon_slave_0_agent:m0_lock -> i2c_1_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_1_avalon_slave_0_agent_m0_writedata;                                            // i2c_1_avalon_slave_0_agent:m0_writedata -> i2c_1_avalon_slave_0_translator:uav_writedata
	wire          i2c_1_avalon_slave_0_agent_m0_write;                                                // i2c_1_avalon_slave_0_agent:m0_write -> i2c_1_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_1_avalon_slave_0_agent_m0_burstcount;                                           // i2c_1_avalon_slave_0_agent:m0_burstcount -> i2c_1_avalon_slave_0_translator:uav_burstcount
	wire          i2c_1_avalon_slave_0_agent_rf_source_valid;                                         // i2c_1_avalon_slave_0_agent:rf_source_valid -> i2c_1_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] i2c_1_avalon_slave_0_agent_rf_source_data;                                          // i2c_1_avalon_slave_0_agent:rf_source_data -> i2c_1_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_1_avalon_slave_0_agent_rf_source_ready;                                         // i2c_1_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_1_avalon_slave_0_agent:rf_source_ready
	wire          i2c_1_avalon_slave_0_agent_rf_source_startofpacket;                                 // i2c_1_avalon_slave_0_agent:rf_source_startofpacket -> i2c_1_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_1_avalon_slave_0_agent_rf_source_endofpacket;                                   // i2c_1_avalon_slave_0_agent:rf_source_endofpacket -> i2c_1_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_1_avalon_slave_0_agent_rsp_fifo_out_valid;                                      // i2c_1_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_1_avalon_slave_0_agent:rf_sink_valid
	wire  [124:0] i2c_1_avalon_slave_0_agent_rsp_fifo_out_data;                                       // i2c_1_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_1_avalon_slave_0_agent:rf_sink_data
	wire          i2c_1_avalon_slave_0_agent_rsp_fifo_out_ready;                                      // i2c_1_avalon_slave_0_agent:rf_sink_ready -> i2c_1_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                              // i2c_1_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_1_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                // i2c_1_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_1_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> i2c_1_avalon_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> i2c_1_avalon_slave_0_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // i2c_1_avalon_slave_0_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [23:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> i2c_1_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> i2c_1_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> i2c_1_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] i2c_3_avalon_slave_0_agent_m0_readdata;                                             // i2c_3_avalon_slave_0_translator:uav_readdata -> i2c_3_avalon_slave_0_agent:m0_readdata
	wire          i2c_3_avalon_slave_0_agent_m0_waitrequest;                                          // i2c_3_avalon_slave_0_translator:uav_waitrequest -> i2c_3_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_3_avalon_slave_0_agent_m0_debugaccess;                                          // i2c_3_avalon_slave_0_agent:m0_debugaccess -> i2c_3_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] i2c_3_avalon_slave_0_agent_m0_address;                                              // i2c_3_avalon_slave_0_agent:m0_address -> i2c_3_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_3_avalon_slave_0_agent_m0_byteenable;                                           // i2c_3_avalon_slave_0_agent:m0_byteenable -> i2c_3_avalon_slave_0_translator:uav_byteenable
	wire          i2c_3_avalon_slave_0_agent_m0_read;                                                 // i2c_3_avalon_slave_0_agent:m0_read -> i2c_3_avalon_slave_0_translator:uav_read
	wire          i2c_3_avalon_slave_0_agent_m0_readdatavalid;                                        // i2c_3_avalon_slave_0_translator:uav_readdatavalid -> i2c_3_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_3_avalon_slave_0_agent_m0_lock;                                                 // i2c_3_avalon_slave_0_agent:m0_lock -> i2c_3_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_3_avalon_slave_0_agent_m0_writedata;                                            // i2c_3_avalon_slave_0_agent:m0_writedata -> i2c_3_avalon_slave_0_translator:uav_writedata
	wire          i2c_3_avalon_slave_0_agent_m0_write;                                                // i2c_3_avalon_slave_0_agent:m0_write -> i2c_3_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_3_avalon_slave_0_agent_m0_burstcount;                                           // i2c_3_avalon_slave_0_agent:m0_burstcount -> i2c_3_avalon_slave_0_translator:uav_burstcount
	wire          i2c_3_avalon_slave_0_agent_rf_source_valid;                                         // i2c_3_avalon_slave_0_agent:rf_source_valid -> i2c_3_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] i2c_3_avalon_slave_0_agent_rf_source_data;                                          // i2c_3_avalon_slave_0_agent:rf_source_data -> i2c_3_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_3_avalon_slave_0_agent_rf_source_ready;                                         // i2c_3_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_3_avalon_slave_0_agent:rf_source_ready
	wire          i2c_3_avalon_slave_0_agent_rf_source_startofpacket;                                 // i2c_3_avalon_slave_0_agent:rf_source_startofpacket -> i2c_3_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_3_avalon_slave_0_agent_rf_source_endofpacket;                                   // i2c_3_avalon_slave_0_agent:rf_source_endofpacket -> i2c_3_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_3_avalon_slave_0_agent_rsp_fifo_out_valid;                                      // i2c_3_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_3_avalon_slave_0_agent:rf_sink_valid
	wire  [124:0] i2c_3_avalon_slave_0_agent_rsp_fifo_out_data;                                       // i2c_3_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_3_avalon_slave_0_agent:rf_sink_data
	wire          i2c_3_avalon_slave_0_agent_rsp_fifo_out_ready;                                      // i2c_3_avalon_slave_0_agent:rf_sink_ready -> i2c_3_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_3_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                              // i2c_3_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_3_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_3_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                // i2c_3_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_3_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> i2c_3_avalon_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> i2c_3_avalon_slave_0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // i2c_3_avalon_slave_0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [23:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> i2c_3_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> i2c_3_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> i2c_3_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] i2c_2_avalon_slave_0_agent_m0_readdata;                                             // i2c_2_avalon_slave_0_translator:uav_readdata -> i2c_2_avalon_slave_0_agent:m0_readdata
	wire          i2c_2_avalon_slave_0_agent_m0_waitrequest;                                          // i2c_2_avalon_slave_0_translator:uav_waitrequest -> i2c_2_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_2_avalon_slave_0_agent_m0_debugaccess;                                          // i2c_2_avalon_slave_0_agent:m0_debugaccess -> i2c_2_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] i2c_2_avalon_slave_0_agent_m0_address;                                              // i2c_2_avalon_slave_0_agent:m0_address -> i2c_2_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_2_avalon_slave_0_agent_m0_byteenable;                                           // i2c_2_avalon_slave_0_agent:m0_byteenable -> i2c_2_avalon_slave_0_translator:uav_byteenable
	wire          i2c_2_avalon_slave_0_agent_m0_read;                                                 // i2c_2_avalon_slave_0_agent:m0_read -> i2c_2_avalon_slave_0_translator:uav_read
	wire          i2c_2_avalon_slave_0_agent_m0_readdatavalid;                                        // i2c_2_avalon_slave_0_translator:uav_readdatavalid -> i2c_2_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_2_avalon_slave_0_agent_m0_lock;                                                 // i2c_2_avalon_slave_0_agent:m0_lock -> i2c_2_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_2_avalon_slave_0_agent_m0_writedata;                                            // i2c_2_avalon_slave_0_agent:m0_writedata -> i2c_2_avalon_slave_0_translator:uav_writedata
	wire          i2c_2_avalon_slave_0_agent_m0_write;                                                // i2c_2_avalon_slave_0_agent:m0_write -> i2c_2_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_2_avalon_slave_0_agent_m0_burstcount;                                           // i2c_2_avalon_slave_0_agent:m0_burstcount -> i2c_2_avalon_slave_0_translator:uav_burstcount
	wire          i2c_2_avalon_slave_0_agent_rf_source_valid;                                         // i2c_2_avalon_slave_0_agent:rf_source_valid -> i2c_2_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] i2c_2_avalon_slave_0_agent_rf_source_data;                                          // i2c_2_avalon_slave_0_agent:rf_source_data -> i2c_2_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_2_avalon_slave_0_agent_rf_source_ready;                                         // i2c_2_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_2_avalon_slave_0_agent:rf_source_ready
	wire          i2c_2_avalon_slave_0_agent_rf_source_startofpacket;                                 // i2c_2_avalon_slave_0_agent:rf_source_startofpacket -> i2c_2_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_2_avalon_slave_0_agent_rf_source_endofpacket;                                   // i2c_2_avalon_slave_0_agent:rf_source_endofpacket -> i2c_2_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_2_avalon_slave_0_agent_rsp_fifo_out_valid;                                      // i2c_2_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_2_avalon_slave_0_agent:rf_sink_valid
	wire  [124:0] i2c_2_avalon_slave_0_agent_rsp_fifo_out_data;                                       // i2c_2_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_2_avalon_slave_0_agent:rf_sink_data
	wire          i2c_2_avalon_slave_0_agent_rsp_fifo_out_ready;                                      // i2c_2_avalon_slave_0_agent:rf_sink_ready -> i2c_2_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_2_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                              // i2c_2_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_2_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_2_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                // i2c_2_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_2_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> i2c_2_avalon_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> i2c_2_avalon_slave_0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // i2c_2_avalon_slave_0_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [23:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> i2c_2_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> i2c_2_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> i2c_2_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] qspi_avl_csr_agent_m0_readdata;                                                     // qspi_avl_csr_translator:uav_readdata -> qspi_avl_csr_agent:m0_readdata
	wire          qspi_avl_csr_agent_m0_waitrequest;                                                  // qspi_avl_csr_translator:uav_waitrequest -> qspi_avl_csr_agent:m0_waitrequest
	wire          qspi_avl_csr_agent_m0_debugaccess;                                                  // qspi_avl_csr_agent:m0_debugaccess -> qspi_avl_csr_translator:uav_debugaccess
	wire   [31:0] qspi_avl_csr_agent_m0_address;                                                      // qspi_avl_csr_agent:m0_address -> qspi_avl_csr_translator:uav_address
	wire    [3:0] qspi_avl_csr_agent_m0_byteenable;                                                   // qspi_avl_csr_agent:m0_byteenable -> qspi_avl_csr_translator:uav_byteenable
	wire          qspi_avl_csr_agent_m0_read;                                                         // qspi_avl_csr_agent:m0_read -> qspi_avl_csr_translator:uav_read
	wire          qspi_avl_csr_agent_m0_readdatavalid;                                                // qspi_avl_csr_translator:uav_readdatavalid -> qspi_avl_csr_agent:m0_readdatavalid
	wire          qspi_avl_csr_agent_m0_lock;                                                         // qspi_avl_csr_agent:m0_lock -> qspi_avl_csr_translator:uav_lock
	wire   [31:0] qspi_avl_csr_agent_m0_writedata;                                                    // qspi_avl_csr_agent:m0_writedata -> qspi_avl_csr_translator:uav_writedata
	wire          qspi_avl_csr_agent_m0_write;                                                        // qspi_avl_csr_agent:m0_write -> qspi_avl_csr_translator:uav_write
	wire    [2:0] qspi_avl_csr_agent_m0_burstcount;                                                   // qspi_avl_csr_agent:m0_burstcount -> qspi_avl_csr_translator:uav_burstcount
	wire          qspi_avl_csr_agent_rf_source_valid;                                                 // qspi_avl_csr_agent:rf_source_valid -> qspi_avl_csr_agent_rsp_fifo:in_valid
	wire  [124:0] qspi_avl_csr_agent_rf_source_data;                                                  // qspi_avl_csr_agent:rf_source_data -> qspi_avl_csr_agent_rsp_fifo:in_data
	wire          qspi_avl_csr_agent_rf_source_ready;                                                 // qspi_avl_csr_agent_rsp_fifo:in_ready -> qspi_avl_csr_agent:rf_source_ready
	wire          qspi_avl_csr_agent_rf_source_startofpacket;                                         // qspi_avl_csr_agent:rf_source_startofpacket -> qspi_avl_csr_agent_rsp_fifo:in_startofpacket
	wire          qspi_avl_csr_agent_rf_source_endofpacket;                                           // qspi_avl_csr_agent:rf_source_endofpacket -> qspi_avl_csr_agent_rsp_fifo:in_endofpacket
	wire          qspi_avl_csr_agent_rsp_fifo_out_valid;                                              // qspi_avl_csr_agent_rsp_fifo:out_valid -> qspi_avl_csr_agent:rf_sink_valid
	wire  [124:0] qspi_avl_csr_agent_rsp_fifo_out_data;                                               // qspi_avl_csr_agent_rsp_fifo:out_data -> qspi_avl_csr_agent:rf_sink_data
	wire          qspi_avl_csr_agent_rsp_fifo_out_ready;                                              // qspi_avl_csr_agent:rf_sink_ready -> qspi_avl_csr_agent_rsp_fifo:out_ready
	wire          qspi_avl_csr_agent_rsp_fifo_out_startofpacket;                                      // qspi_avl_csr_agent_rsp_fifo:out_startofpacket -> qspi_avl_csr_agent:rf_sink_startofpacket
	wire          qspi_avl_csr_agent_rsp_fifo_out_endofpacket;                                        // qspi_avl_csr_agent_rsp_fifo:out_endofpacket -> qspi_avl_csr_agent:rf_sink_endofpacket
	wire          qspi_avl_csr_agent_rdata_fifo_src_valid;                                            // qspi_avl_csr_agent:rdata_fifo_src_valid -> qspi_avl_csr_agent_rdata_fifo:in_valid
	wire   [33:0] qspi_avl_csr_agent_rdata_fifo_src_data;                                             // qspi_avl_csr_agent:rdata_fifo_src_data -> qspi_avl_csr_agent_rdata_fifo:in_data
	wire          qspi_avl_csr_agent_rdata_fifo_src_ready;                                            // qspi_avl_csr_agent_rdata_fifo:in_ready -> qspi_avl_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> qspi_avl_csr_agent:cp_valid
	wire  [123:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> qspi_avl_csr_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // qspi_avl_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [23:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> qspi_avl_csr_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> qspi_avl_csr_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> qspi_avl_csr_agent:cp_endofpacket
	wire   [31:0] qspi_avl_mem_agent_m0_readdata;                                                     // qspi_avl_mem_translator:uav_readdata -> qspi_avl_mem_agent:m0_readdata
	wire          qspi_avl_mem_agent_m0_waitrequest;                                                  // qspi_avl_mem_translator:uav_waitrequest -> qspi_avl_mem_agent:m0_waitrequest
	wire          qspi_avl_mem_agent_m0_debugaccess;                                                  // qspi_avl_mem_agent:m0_debugaccess -> qspi_avl_mem_translator:uav_debugaccess
	wire   [31:0] qspi_avl_mem_agent_m0_address;                                                      // qspi_avl_mem_agent:m0_address -> qspi_avl_mem_translator:uav_address
	wire    [3:0] qspi_avl_mem_agent_m0_byteenable;                                                   // qspi_avl_mem_agent:m0_byteenable -> qspi_avl_mem_translator:uav_byteenable
	wire          qspi_avl_mem_agent_m0_read;                                                         // qspi_avl_mem_agent:m0_read -> qspi_avl_mem_translator:uav_read
	wire          qspi_avl_mem_agent_m0_readdatavalid;                                                // qspi_avl_mem_translator:uav_readdatavalid -> qspi_avl_mem_agent:m0_readdatavalid
	wire          qspi_avl_mem_agent_m0_lock;                                                         // qspi_avl_mem_agent:m0_lock -> qspi_avl_mem_translator:uav_lock
	wire   [31:0] qspi_avl_mem_agent_m0_writedata;                                                    // qspi_avl_mem_agent:m0_writedata -> qspi_avl_mem_translator:uav_writedata
	wire          qspi_avl_mem_agent_m0_write;                                                        // qspi_avl_mem_agent:m0_write -> qspi_avl_mem_translator:uav_write
	wire    [8:0] qspi_avl_mem_agent_m0_burstcount;                                                   // qspi_avl_mem_agent:m0_burstcount -> qspi_avl_mem_translator:uav_burstcount
	wire          qspi_avl_mem_agent_rf_source_valid;                                                 // qspi_avl_mem_agent:rf_source_valid -> qspi_avl_mem_agent_rsp_fifo:in_valid
	wire  [124:0] qspi_avl_mem_agent_rf_source_data;                                                  // qspi_avl_mem_agent:rf_source_data -> qspi_avl_mem_agent_rsp_fifo:in_data
	wire          qspi_avl_mem_agent_rf_source_ready;                                                 // qspi_avl_mem_agent_rsp_fifo:in_ready -> qspi_avl_mem_agent:rf_source_ready
	wire          qspi_avl_mem_agent_rf_source_startofpacket;                                         // qspi_avl_mem_agent:rf_source_startofpacket -> qspi_avl_mem_agent_rsp_fifo:in_startofpacket
	wire          qspi_avl_mem_agent_rf_source_endofpacket;                                           // qspi_avl_mem_agent:rf_source_endofpacket -> qspi_avl_mem_agent_rsp_fifo:in_endofpacket
	wire          qspi_avl_mem_agent_rsp_fifo_out_valid;                                              // qspi_avl_mem_agent_rsp_fifo:out_valid -> qspi_avl_mem_agent:rf_sink_valid
	wire  [124:0] qspi_avl_mem_agent_rsp_fifo_out_data;                                               // qspi_avl_mem_agent_rsp_fifo:out_data -> qspi_avl_mem_agent:rf_sink_data
	wire          qspi_avl_mem_agent_rsp_fifo_out_ready;                                              // qspi_avl_mem_agent:rf_sink_ready -> qspi_avl_mem_agent_rsp_fifo:out_ready
	wire          qspi_avl_mem_agent_rsp_fifo_out_startofpacket;                                      // qspi_avl_mem_agent_rsp_fifo:out_startofpacket -> qspi_avl_mem_agent:rf_sink_startofpacket
	wire          qspi_avl_mem_agent_rsp_fifo_out_endofpacket;                                        // qspi_avl_mem_agent_rsp_fifo:out_endofpacket -> qspi_avl_mem_agent:rf_sink_endofpacket
	wire          qspi_avl_mem_agent_rdata_fifo_src_valid;                                            // qspi_avl_mem_agent:rdata_fifo_src_valid -> qspi_avl_mem_agent_rdata_fifo:in_valid
	wire   [33:0] qspi_avl_mem_agent_rdata_fifo_src_data;                                             // qspi_avl_mem_agent:rdata_fifo_src_data -> qspi_avl_mem_agent_rdata_fifo:in_data
	wire          qspi_avl_mem_agent_rdata_fifo_src_ready;                                            // qspi_avl_mem_agent_rdata_fifo:in_ready -> qspi_avl_mem_agent:rdata_fifo_src_ready
	wire   [31:0] neopixel_0_csr_agent_m0_readdata;                                                   // NEOPIXEL_0_csr_translator:uav_readdata -> NEOPIXEL_0_csr_agent:m0_readdata
	wire          neopixel_0_csr_agent_m0_waitrequest;                                                // NEOPIXEL_0_csr_translator:uav_waitrequest -> NEOPIXEL_0_csr_agent:m0_waitrequest
	wire          neopixel_0_csr_agent_m0_debugaccess;                                                // NEOPIXEL_0_csr_agent:m0_debugaccess -> NEOPIXEL_0_csr_translator:uav_debugaccess
	wire   [31:0] neopixel_0_csr_agent_m0_address;                                                    // NEOPIXEL_0_csr_agent:m0_address -> NEOPIXEL_0_csr_translator:uav_address
	wire    [3:0] neopixel_0_csr_agent_m0_byteenable;                                                 // NEOPIXEL_0_csr_agent:m0_byteenable -> NEOPIXEL_0_csr_translator:uav_byteenable
	wire          neopixel_0_csr_agent_m0_read;                                                       // NEOPIXEL_0_csr_agent:m0_read -> NEOPIXEL_0_csr_translator:uav_read
	wire          neopixel_0_csr_agent_m0_readdatavalid;                                              // NEOPIXEL_0_csr_translator:uav_readdatavalid -> NEOPIXEL_0_csr_agent:m0_readdatavalid
	wire          neopixel_0_csr_agent_m0_lock;                                                       // NEOPIXEL_0_csr_agent:m0_lock -> NEOPIXEL_0_csr_translator:uav_lock
	wire   [31:0] neopixel_0_csr_agent_m0_writedata;                                                  // NEOPIXEL_0_csr_agent:m0_writedata -> NEOPIXEL_0_csr_translator:uav_writedata
	wire          neopixel_0_csr_agent_m0_write;                                                      // NEOPIXEL_0_csr_agent:m0_write -> NEOPIXEL_0_csr_translator:uav_write
	wire    [2:0] neopixel_0_csr_agent_m0_burstcount;                                                 // NEOPIXEL_0_csr_agent:m0_burstcount -> NEOPIXEL_0_csr_translator:uav_burstcount
	wire          neopixel_0_csr_agent_rf_source_valid;                                               // NEOPIXEL_0_csr_agent:rf_source_valid -> NEOPIXEL_0_csr_agent_rsp_fifo:in_valid
	wire  [124:0] neopixel_0_csr_agent_rf_source_data;                                                // NEOPIXEL_0_csr_agent:rf_source_data -> NEOPIXEL_0_csr_agent_rsp_fifo:in_data
	wire          neopixel_0_csr_agent_rf_source_ready;                                               // NEOPIXEL_0_csr_agent_rsp_fifo:in_ready -> NEOPIXEL_0_csr_agent:rf_source_ready
	wire          neopixel_0_csr_agent_rf_source_startofpacket;                                       // NEOPIXEL_0_csr_agent:rf_source_startofpacket -> NEOPIXEL_0_csr_agent_rsp_fifo:in_startofpacket
	wire          neopixel_0_csr_agent_rf_source_endofpacket;                                         // NEOPIXEL_0_csr_agent:rf_source_endofpacket -> NEOPIXEL_0_csr_agent_rsp_fifo:in_endofpacket
	wire          neopixel_0_csr_agent_rsp_fifo_out_valid;                                            // NEOPIXEL_0_csr_agent_rsp_fifo:out_valid -> NEOPIXEL_0_csr_agent:rf_sink_valid
	wire  [124:0] neopixel_0_csr_agent_rsp_fifo_out_data;                                             // NEOPIXEL_0_csr_agent_rsp_fifo:out_data -> NEOPIXEL_0_csr_agent:rf_sink_data
	wire          neopixel_0_csr_agent_rsp_fifo_out_ready;                                            // NEOPIXEL_0_csr_agent:rf_sink_ready -> NEOPIXEL_0_csr_agent_rsp_fifo:out_ready
	wire          neopixel_0_csr_agent_rsp_fifo_out_startofpacket;                                    // NEOPIXEL_0_csr_agent_rsp_fifo:out_startofpacket -> NEOPIXEL_0_csr_agent:rf_sink_startofpacket
	wire          neopixel_0_csr_agent_rsp_fifo_out_endofpacket;                                      // NEOPIXEL_0_csr_agent_rsp_fifo:out_endofpacket -> NEOPIXEL_0_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> NEOPIXEL_0_csr_agent:cp_valid
	wire  [123:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> NEOPIXEL_0_csr_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // NEOPIXEL_0_csr_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [23:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> NEOPIXEL_0_csr_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> NEOPIXEL_0_csr_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> NEOPIXEL_0_csr_agent:cp_endofpacket
	wire   [31:0] tspi_0_d_agent_m0_readdata;                                                         // tspi_0_d_translator:uav_readdata -> tspi_0_d_agent:m0_readdata
	wire          tspi_0_d_agent_m0_waitrequest;                                                      // tspi_0_d_translator:uav_waitrequest -> tspi_0_d_agent:m0_waitrequest
	wire          tspi_0_d_agent_m0_debugaccess;                                                      // tspi_0_d_agent:m0_debugaccess -> tspi_0_d_translator:uav_debugaccess
	wire   [31:0] tspi_0_d_agent_m0_address;                                                          // tspi_0_d_agent:m0_address -> tspi_0_d_translator:uav_address
	wire    [3:0] tspi_0_d_agent_m0_byteenable;                                                       // tspi_0_d_agent:m0_byteenable -> tspi_0_d_translator:uav_byteenable
	wire          tspi_0_d_agent_m0_read;                                                             // tspi_0_d_agent:m0_read -> tspi_0_d_translator:uav_read
	wire          tspi_0_d_agent_m0_readdatavalid;                                                    // tspi_0_d_translator:uav_readdatavalid -> tspi_0_d_agent:m0_readdatavalid
	wire          tspi_0_d_agent_m0_lock;                                                             // tspi_0_d_agent:m0_lock -> tspi_0_d_translator:uav_lock
	wire   [31:0] tspi_0_d_agent_m0_writedata;                                                        // tspi_0_d_agent:m0_writedata -> tspi_0_d_translator:uav_writedata
	wire          tspi_0_d_agent_m0_write;                                                            // tspi_0_d_agent:m0_write -> tspi_0_d_translator:uav_write
	wire    [2:0] tspi_0_d_agent_m0_burstcount;                                                       // tspi_0_d_agent:m0_burstcount -> tspi_0_d_translator:uav_burstcount
	wire          tspi_0_d_agent_rf_source_valid;                                                     // tspi_0_d_agent:rf_source_valid -> tspi_0_d_agent_rsp_fifo:in_valid
	wire  [124:0] tspi_0_d_agent_rf_source_data;                                                      // tspi_0_d_agent:rf_source_data -> tspi_0_d_agent_rsp_fifo:in_data
	wire          tspi_0_d_agent_rf_source_ready;                                                     // tspi_0_d_agent_rsp_fifo:in_ready -> tspi_0_d_agent:rf_source_ready
	wire          tspi_0_d_agent_rf_source_startofpacket;                                             // tspi_0_d_agent:rf_source_startofpacket -> tspi_0_d_agent_rsp_fifo:in_startofpacket
	wire          tspi_0_d_agent_rf_source_endofpacket;                                               // tspi_0_d_agent:rf_source_endofpacket -> tspi_0_d_agent_rsp_fifo:in_endofpacket
	wire          tspi_0_d_agent_rsp_fifo_out_valid;                                                  // tspi_0_d_agent_rsp_fifo:out_valid -> tspi_0_d_agent:rf_sink_valid
	wire  [124:0] tspi_0_d_agent_rsp_fifo_out_data;                                                   // tspi_0_d_agent_rsp_fifo:out_data -> tspi_0_d_agent:rf_sink_data
	wire          tspi_0_d_agent_rsp_fifo_out_ready;                                                  // tspi_0_d_agent:rf_sink_ready -> tspi_0_d_agent_rsp_fifo:out_ready
	wire          tspi_0_d_agent_rsp_fifo_out_startofpacket;                                          // tspi_0_d_agent_rsp_fifo:out_startofpacket -> tspi_0_d_agent:rf_sink_startofpacket
	wire          tspi_0_d_agent_rsp_fifo_out_endofpacket;                                            // tspi_0_d_agent_rsp_fifo:out_endofpacket -> tspi_0_d_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> tspi_0_d_agent:cp_valid
	wire  [123:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> tspi_0_d_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // tspi_0_d_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [23:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> tspi_0_d_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> tspi_0_d_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> tspi_0_d_agent:cp_endofpacket
	wire   [31:0] tspi_1_d_agent_m0_readdata;                                                         // tspi_1_d_translator:uav_readdata -> tspi_1_d_agent:m0_readdata
	wire          tspi_1_d_agent_m0_waitrequest;                                                      // tspi_1_d_translator:uav_waitrequest -> tspi_1_d_agent:m0_waitrequest
	wire          tspi_1_d_agent_m0_debugaccess;                                                      // tspi_1_d_agent:m0_debugaccess -> tspi_1_d_translator:uav_debugaccess
	wire   [31:0] tspi_1_d_agent_m0_address;                                                          // tspi_1_d_agent:m0_address -> tspi_1_d_translator:uav_address
	wire    [3:0] tspi_1_d_agent_m0_byteenable;                                                       // tspi_1_d_agent:m0_byteenable -> tspi_1_d_translator:uav_byteenable
	wire          tspi_1_d_agent_m0_read;                                                             // tspi_1_d_agent:m0_read -> tspi_1_d_translator:uav_read
	wire          tspi_1_d_agent_m0_readdatavalid;                                                    // tspi_1_d_translator:uav_readdatavalid -> tspi_1_d_agent:m0_readdatavalid
	wire          tspi_1_d_agent_m0_lock;                                                             // tspi_1_d_agent:m0_lock -> tspi_1_d_translator:uav_lock
	wire   [31:0] tspi_1_d_agent_m0_writedata;                                                        // tspi_1_d_agent:m0_writedata -> tspi_1_d_translator:uav_writedata
	wire          tspi_1_d_agent_m0_write;                                                            // tspi_1_d_agent:m0_write -> tspi_1_d_translator:uav_write
	wire    [2:0] tspi_1_d_agent_m0_burstcount;                                                       // tspi_1_d_agent:m0_burstcount -> tspi_1_d_translator:uav_burstcount
	wire          tspi_1_d_agent_rf_source_valid;                                                     // tspi_1_d_agent:rf_source_valid -> tspi_1_d_agent_rsp_fifo:in_valid
	wire  [124:0] tspi_1_d_agent_rf_source_data;                                                      // tspi_1_d_agent:rf_source_data -> tspi_1_d_agent_rsp_fifo:in_data
	wire          tspi_1_d_agent_rf_source_ready;                                                     // tspi_1_d_agent_rsp_fifo:in_ready -> tspi_1_d_agent:rf_source_ready
	wire          tspi_1_d_agent_rf_source_startofpacket;                                             // tspi_1_d_agent:rf_source_startofpacket -> tspi_1_d_agent_rsp_fifo:in_startofpacket
	wire          tspi_1_d_agent_rf_source_endofpacket;                                               // tspi_1_d_agent:rf_source_endofpacket -> tspi_1_d_agent_rsp_fifo:in_endofpacket
	wire          tspi_1_d_agent_rsp_fifo_out_valid;                                                  // tspi_1_d_agent_rsp_fifo:out_valid -> tspi_1_d_agent:rf_sink_valid
	wire  [124:0] tspi_1_d_agent_rsp_fifo_out_data;                                                   // tspi_1_d_agent_rsp_fifo:out_data -> tspi_1_d_agent:rf_sink_data
	wire          tspi_1_d_agent_rsp_fifo_out_ready;                                                  // tspi_1_d_agent:rf_sink_ready -> tspi_1_d_agent_rsp_fifo:out_ready
	wire          tspi_1_d_agent_rsp_fifo_out_startofpacket;                                          // tspi_1_d_agent_rsp_fifo:out_startofpacket -> tspi_1_d_agent:rf_sink_startofpacket
	wire          tspi_1_d_agent_rsp_fifo_out_endofpacket;                                            // tspi_1_d_agent_rsp_fifo:out_endofpacket -> tspi_1_d_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> tspi_1_d_agent:cp_valid
	wire  [123:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> tspi_1_d_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                              // tspi_1_d_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [23:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> tspi_1_d_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> tspi_1_d_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> tspi_1_d_agent:cp_endofpacket
	wire   [31:0] tspi_2_d_agent_m0_readdata;                                                         // tspi_2_d_translator:uav_readdata -> tspi_2_d_agent:m0_readdata
	wire          tspi_2_d_agent_m0_waitrequest;                                                      // tspi_2_d_translator:uav_waitrequest -> tspi_2_d_agent:m0_waitrequest
	wire          tspi_2_d_agent_m0_debugaccess;                                                      // tspi_2_d_agent:m0_debugaccess -> tspi_2_d_translator:uav_debugaccess
	wire   [31:0] tspi_2_d_agent_m0_address;                                                          // tspi_2_d_agent:m0_address -> tspi_2_d_translator:uav_address
	wire    [3:0] tspi_2_d_agent_m0_byteenable;                                                       // tspi_2_d_agent:m0_byteenable -> tspi_2_d_translator:uav_byteenable
	wire          tspi_2_d_agent_m0_read;                                                             // tspi_2_d_agent:m0_read -> tspi_2_d_translator:uav_read
	wire          tspi_2_d_agent_m0_readdatavalid;                                                    // tspi_2_d_translator:uav_readdatavalid -> tspi_2_d_agent:m0_readdatavalid
	wire          tspi_2_d_agent_m0_lock;                                                             // tspi_2_d_agent:m0_lock -> tspi_2_d_translator:uav_lock
	wire   [31:0] tspi_2_d_agent_m0_writedata;                                                        // tspi_2_d_agent:m0_writedata -> tspi_2_d_translator:uav_writedata
	wire          tspi_2_d_agent_m0_write;                                                            // tspi_2_d_agent:m0_write -> tspi_2_d_translator:uav_write
	wire    [2:0] tspi_2_d_agent_m0_burstcount;                                                       // tspi_2_d_agent:m0_burstcount -> tspi_2_d_translator:uav_burstcount
	wire          tspi_2_d_agent_rf_source_valid;                                                     // tspi_2_d_agent:rf_source_valid -> tspi_2_d_agent_rsp_fifo:in_valid
	wire  [124:0] tspi_2_d_agent_rf_source_data;                                                      // tspi_2_d_agent:rf_source_data -> tspi_2_d_agent_rsp_fifo:in_data
	wire          tspi_2_d_agent_rf_source_ready;                                                     // tspi_2_d_agent_rsp_fifo:in_ready -> tspi_2_d_agent:rf_source_ready
	wire          tspi_2_d_agent_rf_source_startofpacket;                                             // tspi_2_d_agent:rf_source_startofpacket -> tspi_2_d_agent_rsp_fifo:in_startofpacket
	wire          tspi_2_d_agent_rf_source_endofpacket;                                               // tspi_2_d_agent:rf_source_endofpacket -> tspi_2_d_agent_rsp_fifo:in_endofpacket
	wire          tspi_2_d_agent_rsp_fifo_out_valid;                                                  // tspi_2_d_agent_rsp_fifo:out_valid -> tspi_2_d_agent:rf_sink_valid
	wire  [124:0] tspi_2_d_agent_rsp_fifo_out_data;                                                   // tspi_2_d_agent_rsp_fifo:out_data -> tspi_2_d_agent:rf_sink_data
	wire          tspi_2_d_agent_rsp_fifo_out_ready;                                                  // tspi_2_d_agent:rf_sink_ready -> tspi_2_d_agent_rsp_fifo:out_ready
	wire          tspi_2_d_agent_rsp_fifo_out_startofpacket;                                          // tspi_2_d_agent_rsp_fifo:out_startofpacket -> tspi_2_d_agent:rf_sink_startofpacket
	wire          tspi_2_d_agent_rsp_fifo_out_endofpacket;                                            // tspi_2_d_agent_rsp_fifo:out_endofpacket -> tspi_2_d_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> tspi_2_d_agent:cp_valid
	wire  [123:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> tspi_2_d_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                              // tspi_2_d_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [23:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> tspi_2_d_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> tspi_2_d_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> tspi_2_d_agent:cp_endofpacket
	wire   [31:0] tspi_3_d_agent_m0_readdata;                                                         // tspi_3_d_translator:uav_readdata -> tspi_3_d_agent:m0_readdata
	wire          tspi_3_d_agent_m0_waitrequest;                                                      // tspi_3_d_translator:uav_waitrequest -> tspi_3_d_agent:m0_waitrequest
	wire          tspi_3_d_agent_m0_debugaccess;                                                      // tspi_3_d_agent:m0_debugaccess -> tspi_3_d_translator:uav_debugaccess
	wire   [31:0] tspi_3_d_agent_m0_address;                                                          // tspi_3_d_agent:m0_address -> tspi_3_d_translator:uav_address
	wire    [3:0] tspi_3_d_agent_m0_byteenable;                                                       // tspi_3_d_agent:m0_byteenable -> tspi_3_d_translator:uav_byteenable
	wire          tspi_3_d_agent_m0_read;                                                             // tspi_3_d_agent:m0_read -> tspi_3_d_translator:uav_read
	wire          tspi_3_d_agent_m0_readdatavalid;                                                    // tspi_3_d_translator:uav_readdatavalid -> tspi_3_d_agent:m0_readdatavalid
	wire          tspi_3_d_agent_m0_lock;                                                             // tspi_3_d_agent:m0_lock -> tspi_3_d_translator:uav_lock
	wire   [31:0] tspi_3_d_agent_m0_writedata;                                                        // tspi_3_d_agent:m0_writedata -> tspi_3_d_translator:uav_writedata
	wire          tspi_3_d_agent_m0_write;                                                            // tspi_3_d_agent:m0_write -> tspi_3_d_translator:uav_write
	wire    [2:0] tspi_3_d_agent_m0_burstcount;                                                       // tspi_3_d_agent:m0_burstcount -> tspi_3_d_translator:uav_burstcount
	wire          tspi_3_d_agent_rf_source_valid;                                                     // tspi_3_d_agent:rf_source_valid -> tspi_3_d_agent_rsp_fifo:in_valid
	wire  [124:0] tspi_3_d_agent_rf_source_data;                                                      // tspi_3_d_agent:rf_source_data -> tspi_3_d_agent_rsp_fifo:in_data
	wire          tspi_3_d_agent_rf_source_ready;                                                     // tspi_3_d_agent_rsp_fifo:in_ready -> tspi_3_d_agent:rf_source_ready
	wire          tspi_3_d_agent_rf_source_startofpacket;                                             // tspi_3_d_agent:rf_source_startofpacket -> tspi_3_d_agent_rsp_fifo:in_startofpacket
	wire          tspi_3_d_agent_rf_source_endofpacket;                                               // tspi_3_d_agent:rf_source_endofpacket -> tspi_3_d_agent_rsp_fifo:in_endofpacket
	wire          tspi_3_d_agent_rsp_fifo_out_valid;                                                  // tspi_3_d_agent_rsp_fifo:out_valid -> tspi_3_d_agent:rf_sink_valid
	wire  [124:0] tspi_3_d_agent_rsp_fifo_out_data;                                                   // tspi_3_d_agent_rsp_fifo:out_data -> tspi_3_d_agent:rf_sink_data
	wire          tspi_3_d_agent_rsp_fifo_out_ready;                                                  // tspi_3_d_agent:rf_sink_ready -> tspi_3_d_agent_rsp_fifo:out_ready
	wire          tspi_3_d_agent_rsp_fifo_out_startofpacket;                                          // tspi_3_d_agent_rsp_fifo:out_startofpacket -> tspi_3_d_agent:rf_sink_startofpacket
	wire          tspi_3_d_agent_rsp_fifo_out_endofpacket;                                            // tspi_3_d_agent_rsp_fifo:out_endofpacket -> tspi_3_d_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> tspi_3_d_agent:cp_valid
	wire  [123:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> tspi_3_d_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                              // tspi_3_d_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [23:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> tspi_3_d_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> tspi_3_d_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> tspi_3_d_agent:cp_endofpacket
	wire   [31:0] tspi_4_d_agent_m0_readdata;                                                         // tspi_4_d_translator:uav_readdata -> tspi_4_d_agent:m0_readdata
	wire          tspi_4_d_agent_m0_waitrequest;                                                      // tspi_4_d_translator:uav_waitrequest -> tspi_4_d_agent:m0_waitrequest
	wire          tspi_4_d_agent_m0_debugaccess;                                                      // tspi_4_d_agent:m0_debugaccess -> tspi_4_d_translator:uav_debugaccess
	wire   [31:0] tspi_4_d_agent_m0_address;                                                          // tspi_4_d_agent:m0_address -> tspi_4_d_translator:uav_address
	wire    [3:0] tspi_4_d_agent_m0_byteenable;                                                       // tspi_4_d_agent:m0_byteenable -> tspi_4_d_translator:uav_byteenable
	wire          tspi_4_d_agent_m0_read;                                                             // tspi_4_d_agent:m0_read -> tspi_4_d_translator:uav_read
	wire          tspi_4_d_agent_m0_readdatavalid;                                                    // tspi_4_d_translator:uav_readdatavalid -> tspi_4_d_agent:m0_readdatavalid
	wire          tspi_4_d_agent_m0_lock;                                                             // tspi_4_d_agent:m0_lock -> tspi_4_d_translator:uav_lock
	wire   [31:0] tspi_4_d_agent_m0_writedata;                                                        // tspi_4_d_agent:m0_writedata -> tspi_4_d_translator:uav_writedata
	wire          tspi_4_d_agent_m0_write;                                                            // tspi_4_d_agent:m0_write -> tspi_4_d_translator:uav_write
	wire    [2:0] tspi_4_d_agent_m0_burstcount;                                                       // tspi_4_d_agent:m0_burstcount -> tspi_4_d_translator:uav_burstcount
	wire          tspi_4_d_agent_rf_source_valid;                                                     // tspi_4_d_agent:rf_source_valid -> tspi_4_d_agent_rsp_fifo:in_valid
	wire  [124:0] tspi_4_d_agent_rf_source_data;                                                      // tspi_4_d_agent:rf_source_data -> tspi_4_d_agent_rsp_fifo:in_data
	wire          tspi_4_d_agent_rf_source_ready;                                                     // tspi_4_d_agent_rsp_fifo:in_ready -> tspi_4_d_agent:rf_source_ready
	wire          tspi_4_d_agent_rf_source_startofpacket;                                             // tspi_4_d_agent:rf_source_startofpacket -> tspi_4_d_agent_rsp_fifo:in_startofpacket
	wire          tspi_4_d_agent_rf_source_endofpacket;                                               // tspi_4_d_agent:rf_source_endofpacket -> tspi_4_d_agent_rsp_fifo:in_endofpacket
	wire          tspi_4_d_agent_rsp_fifo_out_valid;                                                  // tspi_4_d_agent_rsp_fifo:out_valid -> tspi_4_d_agent:rf_sink_valid
	wire  [124:0] tspi_4_d_agent_rsp_fifo_out_data;                                                   // tspi_4_d_agent_rsp_fifo:out_data -> tspi_4_d_agent:rf_sink_data
	wire          tspi_4_d_agent_rsp_fifo_out_ready;                                                  // tspi_4_d_agent:rf_sink_ready -> tspi_4_d_agent_rsp_fifo:out_ready
	wire          tspi_4_d_agent_rsp_fifo_out_startofpacket;                                          // tspi_4_d_agent_rsp_fifo:out_startofpacket -> tspi_4_d_agent:rf_sink_startofpacket
	wire          tspi_4_d_agent_rsp_fifo_out_endofpacket;                                            // tspi_4_d_agent_rsp_fifo:out_endofpacket -> tspi_4_d_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> tspi_4_d_agent:cp_valid
	wire  [123:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> tspi_4_d_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                              // tspi_4_d_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [23:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> tspi_4_d_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> tspi_4_d_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> tspi_4_d_agent:cp_endofpacket
	wire   [31:0] flash_spi_d_agent_m0_readdata;                                                      // flash_spi_d_translator:uav_readdata -> flash_spi_d_agent:m0_readdata
	wire          flash_spi_d_agent_m0_waitrequest;                                                   // flash_spi_d_translator:uav_waitrequest -> flash_spi_d_agent:m0_waitrequest
	wire          flash_spi_d_agent_m0_debugaccess;                                                   // flash_spi_d_agent:m0_debugaccess -> flash_spi_d_translator:uav_debugaccess
	wire   [31:0] flash_spi_d_agent_m0_address;                                                       // flash_spi_d_agent:m0_address -> flash_spi_d_translator:uav_address
	wire    [3:0] flash_spi_d_agent_m0_byteenable;                                                    // flash_spi_d_agent:m0_byteenable -> flash_spi_d_translator:uav_byteenable
	wire          flash_spi_d_agent_m0_read;                                                          // flash_spi_d_agent:m0_read -> flash_spi_d_translator:uav_read
	wire          flash_spi_d_agent_m0_readdatavalid;                                                 // flash_spi_d_translator:uav_readdatavalid -> flash_spi_d_agent:m0_readdatavalid
	wire          flash_spi_d_agent_m0_lock;                                                          // flash_spi_d_agent:m0_lock -> flash_spi_d_translator:uav_lock
	wire   [31:0] flash_spi_d_agent_m0_writedata;                                                     // flash_spi_d_agent:m0_writedata -> flash_spi_d_translator:uav_writedata
	wire          flash_spi_d_agent_m0_write;                                                         // flash_spi_d_agent:m0_write -> flash_spi_d_translator:uav_write
	wire    [2:0] flash_spi_d_agent_m0_burstcount;                                                    // flash_spi_d_agent:m0_burstcount -> flash_spi_d_translator:uav_burstcount
	wire          flash_spi_d_agent_rf_source_valid;                                                  // flash_spi_d_agent:rf_source_valid -> flash_spi_d_agent_rsp_fifo:in_valid
	wire  [124:0] flash_spi_d_agent_rf_source_data;                                                   // flash_spi_d_agent:rf_source_data -> flash_spi_d_agent_rsp_fifo:in_data
	wire          flash_spi_d_agent_rf_source_ready;                                                  // flash_spi_d_agent_rsp_fifo:in_ready -> flash_spi_d_agent:rf_source_ready
	wire          flash_spi_d_agent_rf_source_startofpacket;                                          // flash_spi_d_agent:rf_source_startofpacket -> flash_spi_d_agent_rsp_fifo:in_startofpacket
	wire          flash_spi_d_agent_rf_source_endofpacket;                                            // flash_spi_d_agent:rf_source_endofpacket -> flash_spi_d_agent_rsp_fifo:in_endofpacket
	wire          flash_spi_d_agent_rsp_fifo_out_valid;                                               // flash_spi_d_agent_rsp_fifo:out_valid -> flash_spi_d_agent:rf_sink_valid
	wire  [124:0] flash_spi_d_agent_rsp_fifo_out_data;                                                // flash_spi_d_agent_rsp_fifo:out_data -> flash_spi_d_agent:rf_sink_data
	wire          flash_spi_d_agent_rsp_fifo_out_ready;                                               // flash_spi_d_agent:rf_sink_ready -> flash_spi_d_agent_rsp_fifo:out_ready
	wire          flash_spi_d_agent_rsp_fifo_out_startofpacket;                                       // flash_spi_d_agent_rsp_fifo:out_startofpacket -> flash_spi_d_agent:rf_sink_startofpacket
	wire          flash_spi_d_agent_rsp_fifo_out_endofpacket;                                         // flash_spi_d_agent_rsp_fifo:out_endofpacket -> flash_spi_d_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> flash_spi_d_agent:cp_valid
	wire  [123:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> flash_spi_d_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                              // flash_spi_d_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [23:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> flash_spi_d_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> flash_spi_d_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> flash_spi_d_agent:cp_endofpacket
	wire   [31:0] nina_spi_d_agent_m0_readdata;                                                       // nina_spi_d_translator:uav_readdata -> nina_spi_d_agent:m0_readdata
	wire          nina_spi_d_agent_m0_waitrequest;                                                    // nina_spi_d_translator:uav_waitrequest -> nina_spi_d_agent:m0_waitrequest
	wire          nina_spi_d_agent_m0_debugaccess;                                                    // nina_spi_d_agent:m0_debugaccess -> nina_spi_d_translator:uav_debugaccess
	wire   [31:0] nina_spi_d_agent_m0_address;                                                        // nina_spi_d_agent:m0_address -> nina_spi_d_translator:uav_address
	wire    [3:0] nina_spi_d_agent_m0_byteenable;                                                     // nina_spi_d_agent:m0_byteenable -> nina_spi_d_translator:uav_byteenable
	wire          nina_spi_d_agent_m0_read;                                                           // nina_spi_d_agent:m0_read -> nina_spi_d_translator:uav_read
	wire          nina_spi_d_agent_m0_readdatavalid;                                                  // nina_spi_d_translator:uav_readdatavalid -> nina_spi_d_agent:m0_readdatavalid
	wire          nina_spi_d_agent_m0_lock;                                                           // nina_spi_d_agent:m0_lock -> nina_spi_d_translator:uav_lock
	wire   [31:0] nina_spi_d_agent_m0_writedata;                                                      // nina_spi_d_agent:m0_writedata -> nina_spi_d_translator:uav_writedata
	wire          nina_spi_d_agent_m0_write;                                                          // nina_spi_d_agent:m0_write -> nina_spi_d_translator:uav_write
	wire    [2:0] nina_spi_d_agent_m0_burstcount;                                                     // nina_spi_d_agent:m0_burstcount -> nina_spi_d_translator:uav_burstcount
	wire          nina_spi_d_agent_rf_source_valid;                                                   // nina_spi_d_agent:rf_source_valid -> nina_spi_d_agent_rsp_fifo:in_valid
	wire  [124:0] nina_spi_d_agent_rf_source_data;                                                    // nina_spi_d_agent:rf_source_data -> nina_spi_d_agent_rsp_fifo:in_data
	wire          nina_spi_d_agent_rf_source_ready;                                                   // nina_spi_d_agent_rsp_fifo:in_ready -> nina_spi_d_agent:rf_source_ready
	wire          nina_spi_d_agent_rf_source_startofpacket;                                           // nina_spi_d_agent:rf_source_startofpacket -> nina_spi_d_agent_rsp_fifo:in_startofpacket
	wire          nina_spi_d_agent_rf_source_endofpacket;                                             // nina_spi_d_agent:rf_source_endofpacket -> nina_spi_d_agent_rsp_fifo:in_endofpacket
	wire          nina_spi_d_agent_rsp_fifo_out_valid;                                                // nina_spi_d_agent_rsp_fifo:out_valid -> nina_spi_d_agent:rf_sink_valid
	wire  [124:0] nina_spi_d_agent_rsp_fifo_out_data;                                                 // nina_spi_d_agent_rsp_fifo:out_data -> nina_spi_d_agent:rf_sink_data
	wire          nina_spi_d_agent_rsp_fifo_out_ready;                                                // nina_spi_d_agent:rf_sink_ready -> nina_spi_d_agent_rsp_fifo:out_ready
	wire          nina_spi_d_agent_rsp_fifo_out_startofpacket;                                        // nina_spi_d_agent_rsp_fifo:out_startofpacket -> nina_spi_d_agent:rf_sink_startofpacket
	wire          nina_spi_d_agent_rsp_fifo_out_endofpacket;                                          // nina_spi_d_agent_rsp_fifo:out_endofpacket -> nina_spi_d_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> nina_spi_d_agent:cp_valid
	wire  [123:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> nina_spi_d_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                              // nina_spi_d_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [23:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> nina_spi_d_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> nina_spi_d_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> nina_spi_d_agent:cp_endofpacket
	wire   [31:0] sam_pio_s1_agent_m0_readdata;                                                       // sam_pio_s1_translator:uav_readdata -> sam_pio_s1_agent:m0_readdata
	wire          sam_pio_s1_agent_m0_waitrequest;                                                    // sam_pio_s1_translator:uav_waitrequest -> sam_pio_s1_agent:m0_waitrequest
	wire          sam_pio_s1_agent_m0_debugaccess;                                                    // sam_pio_s1_agent:m0_debugaccess -> sam_pio_s1_translator:uav_debugaccess
	wire   [31:0] sam_pio_s1_agent_m0_address;                                                        // sam_pio_s1_agent:m0_address -> sam_pio_s1_translator:uav_address
	wire    [3:0] sam_pio_s1_agent_m0_byteenable;                                                     // sam_pio_s1_agent:m0_byteenable -> sam_pio_s1_translator:uav_byteenable
	wire          sam_pio_s1_agent_m0_read;                                                           // sam_pio_s1_agent:m0_read -> sam_pio_s1_translator:uav_read
	wire          sam_pio_s1_agent_m0_readdatavalid;                                                  // sam_pio_s1_translator:uav_readdatavalid -> sam_pio_s1_agent:m0_readdatavalid
	wire          sam_pio_s1_agent_m0_lock;                                                           // sam_pio_s1_agent:m0_lock -> sam_pio_s1_translator:uav_lock
	wire   [31:0] sam_pio_s1_agent_m0_writedata;                                                      // sam_pio_s1_agent:m0_writedata -> sam_pio_s1_translator:uav_writedata
	wire          sam_pio_s1_agent_m0_write;                                                          // sam_pio_s1_agent:m0_write -> sam_pio_s1_translator:uav_write
	wire    [2:0] sam_pio_s1_agent_m0_burstcount;                                                     // sam_pio_s1_agent:m0_burstcount -> sam_pio_s1_translator:uav_burstcount
	wire          sam_pio_s1_agent_rf_source_valid;                                                   // sam_pio_s1_agent:rf_source_valid -> sam_pio_s1_agent_rsp_fifo:in_valid
	wire  [124:0] sam_pio_s1_agent_rf_source_data;                                                    // sam_pio_s1_agent:rf_source_data -> sam_pio_s1_agent_rsp_fifo:in_data
	wire          sam_pio_s1_agent_rf_source_ready;                                                   // sam_pio_s1_agent_rsp_fifo:in_ready -> sam_pio_s1_agent:rf_source_ready
	wire          sam_pio_s1_agent_rf_source_startofpacket;                                           // sam_pio_s1_agent:rf_source_startofpacket -> sam_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          sam_pio_s1_agent_rf_source_endofpacket;                                             // sam_pio_s1_agent:rf_source_endofpacket -> sam_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          sam_pio_s1_agent_rsp_fifo_out_valid;                                                // sam_pio_s1_agent_rsp_fifo:out_valid -> sam_pio_s1_agent:rf_sink_valid
	wire  [124:0] sam_pio_s1_agent_rsp_fifo_out_data;                                                 // sam_pio_s1_agent_rsp_fifo:out_data -> sam_pio_s1_agent:rf_sink_data
	wire          sam_pio_s1_agent_rsp_fifo_out_ready;                                                // sam_pio_s1_agent:rf_sink_ready -> sam_pio_s1_agent_rsp_fifo:out_ready
	wire          sam_pio_s1_agent_rsp_fifo_out_startofpacket;                                        // sam_pio_s1_agent_rsp_fifo:out_startofpacket -> sam_pio_s1_agent:rf_sink_startofpacket
	wire          sam_pio_s1_agent_rsp_fifo_out_endofpacket;                                          // sam_pio_s1_agent_rsp_fifo:out_endofpacket -> sam_pio_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> sam_pio_s1_agent:cp_valid
	wire  [123:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> sam_pio_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                              // sam_pio_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [23:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> sam_pio_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> sam_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> sam_pio_s1_agent:cp_endofpacket
	wire   [31:0] pex_pio_s1_agent_m0_readdata;                                                       // pex_pio_s1_translator:uav_readdata -> pex_pio_s1_agent:m0_readdata
	wire          pex_pio_s1_agent_m0_waitrequest;                                                    // pex_pio_s1_translator:uav_waitrequest -> pex_pio_s1_agent:m0_waitrequest
	wire          pex_pio_s1_agent_m0_debugaccess;                                                    // pex_pio_s1_agent:m0_debugaccess -> pex_pio_s1_translator:uav_debugaccess
	wire   [31:0] pex_pio_s1_agent_m0_address;                                                        // pex_pio_s1_agent:m0_address -> pex_pio_s1_translator:uav_address
	wire    [3:0] pex_pio_s1_agent_m0_byteenable;                                                     // pex_pio_s1_agent:m0_byteenable -> pex_pio_s1_translator:uav_byteenable
	wire          pex_pio_s1_agent_m0_read;                                                           // pex_pio_s1_agent:m0_read -> pex_pio_s1_translator:uav_read
	wire          pex_pio_s1_agent_m0_readdatavalid;                                                  // pex_pio_s1_translator:uav_readdatavalid -> pex_pio_s1_agent:m0_readdatavalid
	wire          pex_pio_s1_agent_m0_lock;                                                           // pex_pio_s1_agent:m0_lock -> pex_pio_s1_translator:uav_lock
	wire   [31:0] pex_pio_s1_agent_m0_writedata;                                                      // pex_pio_s1_agent:m0_writedata -> pex_pio_s1_translator:uav_writedata
	wire          pex_pio_s1_agent_m0_write;                                                          // pex_pio_s1_agent:m0_write -> pex_pio_s1_translator:uav_write
	wire    [2:0] pex_pio_s1_agent_m0_burstcount;                                                     // pex_pio_s1_agent:m0_burstcount -> pex_pio_s1_translator:uav_burstcount
	wire          pex_pio_s1_agent_rf_source_valid;                                                   // pex_pio_s1_agent:rf_source_valid -> pex_pio_s1_agent_rsp_fifo:in_valid
	wire  [124:0] pex_pio_s1_agent_rf_source_data;                                                    // pex_pio_s1_agent:rf_source_data -> pex_pio_s1_agent_rsp_fifo:in_data
	wire          pex_pio_s1_agent_rf_source_ready;                                                   // pex_pio_s1_agent_rsp_fifo:in_ready -> pex_pio_s1_agent:rf_source_ready
	wire          pex_pio_s1_agent_rf_source_startofpacket;                                           // pex_pio_s1_agent:rf_source_startofpacket -> pex_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          pex_pio_s1_agent_rf_source_endofpacket;                                             // pex_pio_s1_agent:rf_source_endofpacket -> pex_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          pex_pio_s1_agent_rsp_fifo_out_valid;                                                // pex_pio_s1_agent_rsp_fifo:out_valid -> pex_pio_s1_agent:rf_sink_valid
	wire  [124:0] pex_pio_s1_agent_rsp_fifo_out_data;                                                 // pex_pio_s1_agent_rsp_fifo:out_data -> pex_pio_s1_agent:rf_sink_data
	wire          pex_pio_s1_agent_rsp_fifo_out_ready;                                                // pex_pio_s1_agent:rf_sink_ready -> pex_pio_s1_agent_rsp_fifo:out_ready
	wire          pex_pio_s1_agent_rsp_fifo_out_startofpacket;                                        // pex_pio_s1_agent_rsp_fifo:out_startofpacket -> pex_pio_s1_agent:rf_sink_startofpacket
	wire          pex_pio_s1_agent_rsp_fifo_out_endofpacket;                                          // pex_pio_s1_agent_rsp_fifo:out_endofpacket -> pex_pio_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> pex_pio_s1_agent:cp_valid
	wire  [123:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> pex_pio_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                              // pex_pio_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [23:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> pex_pio_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> pex_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> pex_pio_s1_agent:cp_endofpacket
	wire   [31:0] wm_pio_s1_agent_m0_readdata;                                                        // wm_pio_s1_translator:uav_readdata -> wm_pio_s1_agent:m0_readdata
	wire          wm_pio_s1_agent_m0_waitrequest;                                                     // wm_pio_s1_translator:uav_waitrequest -> wm_pio_s1_agent:m0_waitrequest
	wire          wm_pio_s1_agent_m0_debugaccess;                                                     // wm_pio_s1_agent:m0_debugaccess -> wm_pio_s1_translator:uav_debugaccess
	wire   [31:0] wm_pio_s1_agent_m0_address;                                                         // wm_pio_s1_agent:m0_address -> wm_pio_s1_translator:uav_address
	wire    [3:0] wm_pio_s1_agent_m0_byteenable;                                                      // wm_pio_s1_agent:m0_byteenable -> wm_pio_s1_translator:uav_byteenable
	wire          wm_pio_s1_agent_m0_read;                                                            // wm_pio_s1_agent:m0_read -> wm_pio_s1_translator:uav_read
	wire          wm_pio_s1_agent_m0_readdatavalid;                                                   // wm_pio_s1_translator:uav_readdatavalid -> wm_pio_s1_agent:m0_readdatavalid
	wire          wm_pio_s1_agent_m0_lock;                                                            // wm_pio_s1_agent:m0_lock -> wm_pio_s1_translator:uav_lock
	wire   [31:0] wm_pio_s1_agent_m0_writedata;                                                       // wm_pio_s1_agent:m0_writedata -> wm_pio_s1_translator:uav_writedata
	wire          wm_pio_s1_agent_m0_write;                                                           // wm_pio_s1_agent:m0_write -> wm_pio_s1_translator:uav_write
	wire    [2:0] wm_pio_s1_agent_m0_burstcount;                                                      // wm_pio_s1_agent:m0_burstcount -> wm_pio_s1_translator:uav_burstcount
	wire          wm_pio_s1_agent_rf_source_valid;                                                    // wm_pio_s1_agent:rf_source_valid -> wm_pio_s1_agent_rsp_fifo:in_valid
	wire  [124:0] wm_pio_s1_agent_rf_source_data;                                                     // wm_pio_s1_agent:rf_source_data -> wm_pio_s1_agent_rsp_fifo:in_data
	wire          wm_pio_s1_agent_rf_source_ready;                                                    // wm_pio_s1_agent_rsp_fifo:in_ready -> wm_pio_s1_agent:rf_source_ready
	wire          wm_pio_s1_agent_rf_source_startofpacket;                                            // wm_pio_s1_agent:rf_source_startofpacket -> wm_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          wm_pio_s1_agent_rf_source_endofpacket;                                              // wm_pio_s1_agent:rf_source_endofpacket -> wm_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          wm_pio_s1_agent_rsp_fifo_out_valid;                                                 // wm_pio_s1_agent_rsp_fifo:out_valid -> wm_pio_s1_agent:rf_sink_valid
	wire  [124:0] wm_pio_s1_agent_rsp_fifo_out_data;                                                  // wm_pio_s1_agent_rsp_fifo:out_data -> wm_pio_s1_agent:rf_sink_data
	wire          wm_pio_s1_agent_rsp_fifo_out_ready;                                                 // wm_pio_s1_agent:rf_sink_ready -> wm_pio_s1_agent_rsp_fifo:out_ready
	wire          wm_pio_s1_agent_rsp_fifo_out_startofpacket;                                         // wm_pio_s1_agent_rsp_fifo:out_startofpacket -> wm_pio_s1_agent:rf_sink_startofpacket
	wire          wm_pio_s1_agent_rsp_fifo_out_endofpacket;                                           // wm_pio_s1_agent_rsp_fifo:out_endofpacket -> wm_pio_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> wm_pio_s1_agent:cp_valid
	wire  [123:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> wm_pio_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                              // wm_pio_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [23:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> wm_pio_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> wm_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> wm_pio_s1_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                       // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                    // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                    // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                                        // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                     // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                           // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                  // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                           // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                      // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                          // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                     // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                   // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [124:0] timer_0_s1_agent_rf_source_data;                                                    // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                   // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                           // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                             // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [124:0] timer_0_s1_agent_rsp_fifo_out_data;                                                 // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> timer_0_s1_agent:cp_valid
	wire  [123:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                              // timer_0_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [23:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [124:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [124:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [123:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                              // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [23:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire   [31:0] mb_slv_agent_m0_readdata;                                                           // mb_slv_translator:uav_readdata -> mb_slv_agent:m0_readdata
	wire          mb_slv_agent_m0_waitrequest;                                                        // mb_slv_translator:uav_waitrequest -> mb_slv_agent:m0_waitrequest
	wire          mb_slv_agent_m0_debugaccess;                                                        // mb_slv_agent:m0_debugaccess -> mb_slv_translator:uav_debugaccess
	wire   [31:0] mb_slv_agent_m0_address;                                                            // mb_slv_agent:m0_address -> mb_slv_translator:uav_address
	wire    [3:0] mb_slv_agent_m0_byteenable;                                                         // mb_slv_agent:m0_byteenable -> mb_slv_translator:uav_byteenable
	wire          mb_slv_agent_m0_read;                                                               // mb_slv_agent:m0_read -> mb_slv_translator:uav_read
	wire          mb_slv_agent_m0_readdatavalid;                                                      // mb_slv_translator:uav_readdatavalid -> mb_slv_agent:m0_readdatavalid
	wire          mb_slv_agent_m0_lock;                                                               // mb_slv_agent:m0_lock -> mb_slv_translator:uav_lock
	wire   [31:0] mb_slv_agent_m0_writedata;                                                          // mb_slv_agent:m0_writedata -> mb_slv_translator:uav_writedata
	wire          mb_slv_agent_m0_write;                                                              // mb_slv_agent:m0_write -> mb_slv_translator:uav_write
	wire    [2:0] mb_slv_agent_m0_burstcount;                                                         // mb_slv_agent:m0_burstcount -> mb_slv_translator:uav_burstcount
	wire          mb_slv_agent_rf_source_valid;                                                       // mb_slv_agent:rf_source_valid -> mb_slv_agent_rsp_fifo:in_valid
	wire  [124:0] mb_slv_agent_rf_source_data;                                                        // mb_slv_agent:rf_source_data -> mb_slv_agent_rsp_fifo:in_data
	wire          mb_slv_agent_rf_source_ready;                                                       // mb_slv_agent_rsp_fifo:in_ready -> mb_slv_agent:rf_source_ready
	wire          mb_slv_agent_rf_source_startofpacket;                                               // mb_slv_agent:rf_source_startofpacket -> mb_slv_agent_rsp_fifo:in_startofpacket
	wire          mb_slv_agent_rf_source_endofpacket;                                                 // mb_slv_agent:rf_source_endofpacket -> mb_slv_agent_rsp_fifo:in_endofpacket
	wire          mb_slv_agent_rsp_fifo_out_valid;                                                    // mb_slv_agent_rsp_fifo:out_valid -> mb_slv_agent:rf_sink_valid
	wire  [124:0] mb_slv_agent_rsp_fifo_out_data;                                                     // mb_slv_agent_rsp_fifo:out_data -> mb_slv_agent:rf_sink_data
	wire          mb_slv_agent_rsp_fifo_out_ready;                                                    // mb_slv_agent:rf_sink_ready -> mb_slv_agent_rsp_fifo:out_ready
	wire          mb_slv_agent_rsp_fifo_out_startofpacket;                                            // mb_slv_agent_rsp_fifo:out_startofpacket -> mb_slv_agent:rf_sink_startofpacket
	wire          mb_slv_agent_rsp_fifo_out_endofpacket;                                              // mb_slv_agent_rsp_fifo:out_endofpacket -> mb_slv_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                              // cmd_mux_022:src_valid -> mb_slv_agent:cp_valid
	wire  [123:0] cmd_mux_022_src_data;                                                               // cmd_mux_022:src_data -> mb_slv_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                              // mb_slv_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [23:0] cmd_mux_022_src_channel;                                                            // cmd_mux_022:src_channel -> mb_slv_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                      // cmd_mux_022:src_startofpacket -> mb_slv_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                        // cmd_mux_022:src_endofpacket -> mb_slv_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_0_s2_agent_m0_readdata;                                              // onchip_memory2_0_s2_translator:uav_readdata -> onchip_memory2_0_s2_agent:m0_readdata
	wire          onchip_memory2_0_s2_agent_m0_waitrequest;                                           // onchip_memory2_0_s2_translator:uav_waitrequest -> onchip_memory2_0_s2_agent:m0_waitrequest
	wire          onchip_memory2_0_s2_agent_m0_debugaccess;                                           // onchip_memory2_0_s2_agent:m0_debugaccess -> onchip_memory2_0_s2_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s2_agent_m0_address;                                               // onchip_memory2_0_s2_agent:m0_address -> onchip_memory2_0_s2_translator:uav_address
	wire    [3:0] onchip_memory2_0_s2_agent_m0_byteenable;                                            // onchip_memory2_0_s2_agent:m0_byteenable -> onchip_memory2_0_s2_translator:uav_byteenable
	wire          onchip_memory2_0_s2_agent_m0_read;                                                  // onchip_memory2_0_s2_agent:m0_read -> onchip_memory2_0_s2_translator:uav_read
	wire          onchip_memory2_0_s2_agent_m0_readdatavalid;                                         // onchip_memory2_0_s2_translator:uav_readdatavalid -> onchip_memory2_0_s2_agent:m0_readdatavalid
	wire          onchip_memory2_0_s2_agent_m0_lock;                                                  // onchip_memory2_0_s2_agent:m0_lock -> onchip_memory2_0_s2_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s2_agent_m0_writedata;                                             // onchip_memory2_0_s2_agent:m0_writedata -> onchip_memory2_0_s2_translator:uav_writedata
	wire          onchip_memory2_0_s2_agent_m0_write;                                                 // onchip_memory2_0_s2_agent:m0_write -> onchip_memory2_0_s2_translator:uav_write
	wire    [2:0] onchip_memory2_0_s2_agent_m0_burstcount;                                            // onchip_memory2_0_s2_agent:m0_burstcount -> onchip_memory2_0_s2_translator:uav_burstcount
	wire          onchip_memory2_0_s2_agent_rf_source_valid;                                          // onchip_memory2_0_s2_agent:rf_source_valid -> onchip_memory2_0_s2_agent_rsp_fifo:in_valid
	wire  [124:0] onchip_memory2_0_s2_agent_rf_source_data;                                           // onchip_memory2_0_s2_agent:rf_source_data -> onchip_memory2_0_s2_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s2_agent_rf_source_ready;                                          // onchip_memory2_0_s2_agent_rsp_fifo:in_ready -> onchip_memory2_0_s2_agent:rf_source_ready
	wire          onchip_memory2_0_s2_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s2_agent:rf_source_startofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s2_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s2_agent:rf_source_endofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s2_agent_rsp_fifo:out_valid -> onchip_memory2_0_s2_agent:rf_sink_valid
	wire  [124:0] onchip_memory2_0_s2_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s2_agent_rsp_fifo:out_data -> onchip_memory2_0_s2_agent:rf_sink_data
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s2_agent:rf_sink_ready -> onchip_memory2_0_s2_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s2_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s2_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s2_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s2_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                              // cmd_mux_023:src_valid -> onchip_memory2_0_s2_agent:cp_valid
	wire  [123:0] cmd_mux_023_src_data;                                                               // cmd_mux_023:src_data -> onchip_memory2_0_s2_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                              // onchip_memory2_0_s2_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [23:0] cmd_mux_023_src_channel;                                                            // cmd_mux_023:src_channel -> onchip_memory2_0_s2_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                      // cmd_mux_023:src_startofpacket -> onchip_memory2_0_s2_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                        // cmd_mux_023:src_endofpacket -> onchip_memory2_0_s2_agent:cp_endofpacket
	wire          neopixel_0_data_agent_cp_valid;                                                     // NEOPIXEL_0_data_agent:cp_valid -> router:sink_valid
	wire  [123:0] neopixel_0_data_agent_cp_data;                                                      // NEOPIXEL_0_data_agent:cp_data -> router:sink_data
	wire          neopixel_0_data_agent_cp_ready;                                                     // router:sink_ready -> NEOPIXEL_0_data_agent:cp_ready
	wire          neopixel_0_data_agent_cp_startofpacket;                                             // NEOPIXEL_0_data_agent:cp_startofpacket -> router:sink_startofpacket
	wire          neopixel_0_data_agent_cp_endofpacket;                                               // NEOPIXEL_0_data_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [123:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [23:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [123:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router_001:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [123:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [23:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [123:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_002:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_002:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [123:0] router_002_src_data;                                                                // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                               // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [23:0] router_002_src_channel;                                                             // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                            // sdram_s1_agent:rp_valid -> router_003:sink_valid
	wire  [105:0] sdram_s1_agent_rp_data;                                                             // sdram_s1_agent:rp_data -> router_003:sink_data
	wire          sdram_s1_agent_rp_ready;                                                            // router_003:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                    // sdram_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                      // sdram_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          sam_pwm_avalon_slave_0_agent_rp_valid;                                              // sam_pwm_avalon_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [123:0] sam_pwm_avalon_slave_0_agent_rp_data;                                               // sam_pwm_avalon_slave_0_agent:rp_data -> router_004:sink_data
	wire          sam_pwm_avalon_slave_0_agent_rp_ready;                                              // router_004:sink_ready -> sam_pwm_avalon_slave_0_agent:rp_ready
	wire          sam_pwm_avalon_slave_0_agent_rp_startofpacket;                                      // sam_pwm_avalon_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sam_pwm_avalon_slave_0_agent_rp_endofpacket;                                        // sam_pwm_avalon_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [123:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [23:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          quad_encoder_0_avalon_slave_0_agent_rp_valid;                                       // QUAD_ENCODER_0_avalon_slave_0_agent:rp_valid -> router_005:sink_valid
	wire  [123:0] quad_encoder_0_avalon_slave_0_agent_rp_data;                                        // QUAD_ENCODER_0_avalon_slave_0_agent:rp_data -> router_005:sink_data
	wire          quad_encoder_0_avalon_slave_0_agent_rp_ready;                                       // router_005:sink_ready -> QUAD_ENCODER_0_avalon_slave_0_agent:rp_ready
	wire          quad_encoder_0_avalon_slave_0_agent_rp_startofpacket;                               // QUAD_ENCODER_0_avalon_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          quad_encoder_0_avalon_slave_0_agent_rp_endofpacket;                                 // QUAD_ENCODER_0_avalon_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [123:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [23:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          i2c_0_avalon_slave_0_agent_rp_valid;                                                // i2c_0_avalon_slave_0_agent:rp_valid -> router_006:sink_valid
	wire  [123:0] i2c_0_avalon_slave_0_agent_rp_data;                                                 // i2c_0_avalon_slave_0_agent:rp_data -> router_006:sink_data
	wire          i2c_0_avalon_slave_0_agent_rp_ready;                                                // router_006:sink_ready -> i2c_0_avalon_slave_0_agent:rp_ready
	wire          i2c_0_avalon_slave_0_agent_rp_startofpacket;                                        // i2c_0_avalon_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          i2c_0_avalon_slave_0_agent_rp_endofpacket;                                          // i2c_0_avalon_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [123:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [23:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          i2c_1_avalon_slave_0_agent_rp_valid;                                                // i2c_1_avalon_slave_0_agent:rp_valid -> router_007:sink_valid
	wire  [123:0] i2c_1_avalon_slave_0_agent_rp_data;                                                 // i2c_1_avalon_slave_0_agent:rp_data -> router_007:sink_data
	wire          i2c_1_avalon_slave_0_agent_rp_ready;                                                // router_007:sink_ready -> i2c_1_avalon_slave_0_agent:rp_ready
	wire          i2c_1_avalon_slave_0_agent_rp_startofpacket;                                        // i2c_1_avalon_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          i2c_1_avalon_slave_0_agent_rp_endofpacket;                                          // i2c_1_avalon_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [123:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [23:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          i2c_3_avalon_slave_0_agent_rp_valid;                                                // i2c_3_avalon_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [123:0] i2c_3_avalon_slave_0_agent_rp_data;                                                 // i2c_3_avalon_slave_0_agent:rp_data -> router_008:sink_data
	wire          i2c_3_avalon_slave_0_agent_rp_ready;                                                // router_008:sink_ready -> i2c_3_avalon_slave_0_agent:rp_ready
	wire          i2c_3_avalon_slave_0_agent_rp_startofpacket;                                        // i2c_3_avalon_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          i2c_3_avalon_slave_0_agent_rp_endofpacket;                                          // i2c_3_avalon_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [123:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [23:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          i2c_2_avalon_slave_0_agent_rp_valid;                                                // i2c_2_avalon_slave_0_agent:rp_valid -> router_009:sink_valid
	wire  [123:0] i2c_2_avalon_slave_0_agent_rp_data;                                                 // i2c_2_avalon_slave_0_agent:rp_data -> router_009:sink_data
	wire          i2c_2_avalon_slave_0_agent_rp_ready;                                                // router_009:sink_ready -> i2c_2_avalon_slave_0_agent:rp_ready
	wire          i2c_2_avalon_slave_0_agent_rp_startofpacket;                                        // i2c_2_avalon_slave_0_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          i2c_2_avalon_slave_0_agent_rp_endofpacket;                                          // i2c_2_avalon_slave_0_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [123:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [23:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          qspi_avl_csr_agent_rp_valid;                                                        // qspi_avl_csr_agent:rp_valid -> router_010:sink_valid
	wire  [123:0] qspi_avl_csr_agent_rp_data;                                                         // qspi_avl_csr_agent:rp_data -> router_010:sink_data
	wire          qspi_avl_csr_agent_rp_ready;                                                        // router_010:sink_ready -> qspi_avl_csr_agent:rp_ready
	wire          qspi_avl_csr_agent_rp_startofpacket;                                                // qspi_avl_csr_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          qspi_avl_csr_agent_rp_endofpacket;                                                  // qspi_avl_csr_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [123:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [23:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          qspi_avl_mem_agent_rp_valid;                                                        // qspi_avl_mem_agent:rp_valid -> router_011:sink_valid
	wire  [123:0] qspi_avl_mem_agent_rp_data;                                                         // qspi_avl_mem_agent:rp_data -> router_011:sink_data
	wire          qspi_avl_mem_agent_rp_ready;                                                        // router_011:sink_ready -> qspi_avl_mem_agent:rp_ready
	wire          qspi_avl_mem_agent_rp_startofpacket;                                                // qspi_avl_mem_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          qspi_avl_mem_agent_rp_endofpacket;                                                  // qspi_avl_mem_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [123:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [23:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          neopixel_0_csr_agent_rp_valid;                                                      // NEOPIXEL_0_csr_agent:rp_valid -> router_012:sink_valid
	wire  [123:0] neopixel_0_csr_agent_rp_data;                                                       // NEOPIXEL_0_csr_agent:rp_data -> router_012:sink_data
	wire          neopixel_0_csr_agent_rp_ready;                                                      // router_012:sink_ready -> NEOPIXEL_0_csr_agent:rp_ready
	wire          neopixel_0_csr_agent_rp_startofpacket;                                              // NEOPIXEL_0_csr_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          neopixel_0_csr_agent_rp_endofpacket;                                                // NEOPIXEL_0_csr_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [123:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [23:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          tspi_0_d_agent_rp_valid;                                                            // tspi_0_d_agent:rp_valid -> router_013:sink_valid
	wire  [123:0] tspi_0_d_agent_rp_data;                                                             // tspi_0_d_agent:rp_data -> router_013:sink_data
	wire          tspi_0_d_agent_rp_ready;                                                            // router_013:sink_ready -> tspi_0_d_agent:rp_ready
	wire          tspi_0_d_agent_rp_startofpacket;                                                    // tspi_0_d_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          tspi_0_d_agent_rp_endofpacket;                                                      // tspi_0_d_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [123:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [23:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          tspi_1_d_agent_rp_valid;                                                            // tspi_1_d_agent:rp_valid -> router_014:sink_valid
	wire  [123:0] tspi_1_d_agent_rp_data;                                                             // tspi_1_d_agent:rp_data -> router_014:sink_data
	wire          tspi_1_d_agent_rp_ready;                                                            // router_014:sink_ready -> tspi_1_d_agent:rp_ready
	wire          tspi_1_d_agent_rp_startofpacket;                                                    // tspi_1_d_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          tspi_1_d_agent_rp_endofpacket;                                                      // tspi_1_d_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_011:sink_valid
	wire  [123:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [23:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          tspi_2_d_agent_rp_valid;                                                            // tspi_2_d_agent:rp_valid -> router_015:sink_valid
	wire  [123:0] tspi_2_d_agent_rp_data;                                                             // tspi_2_d_agent:rp_data -> router_015:sink_data
	wire          tspi_2_d_agent_rp_ready;                                                            // router_015:sink_ready -> tspi_2_d_agent:rp_ready
	wire          tspi_2_d_agent_rp_startofpacket;                                                    // tspi_2_d_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          tspi_2_d_agent_rp_endofpacket;                                                      // tspi_2_d_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_012:sink_valid
	wire  [123:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [23:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          tspi_3_d_agent_rp_valid;                                                            // tspi_3_d_agent:rp_valid -> router_016:sink_valid
	wire  [123:0] tspi_3_d_agent_rp_data;                                                             // tspi_3_d_agent:rp_data -> router_016:sink_data
	wire          tspi_3_d_agent_rp_ready;                                                            // router_016:sink_ready -> tspi_3_d_agent:rp_ready
	wire          tspi_3_d_agent_rp_startofpacket;                                                    // tspi_3_d_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          tspi_3_d_agent_rp_endofpacket;                                                      // tspi_3_d_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_013:sink_valid
	wire  [123:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [23:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          tspi_4_d_agent_rp_valid;                                                            // tspi_4_d_agent:rp_valid -> router_017:sink_valid
	wire  [123:0] tspi_4_d_agent_rp_data;                                                             // tspi_4_d_agent:rp_data -> router_017:sink_data
	wire          tspi_4_d_agent_rp_ready;                                                            // router_017:sink_ready -> tspi_4_d_agent:rp_ready
	wire          tspi_4_d_agent_rp_startofpacket;                                                    // tspi_4_d_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          tspi_4_d_agent_rp_endofpacket;                                                      // tspi_4_d_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_014:sink_valid
	wire  [123:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [23:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          flash_spi_d_agent_rp_valid;                                                         // flash_spi_d_agent:rp_valid -> router_018:sink_valid
	wire  [123:0] flash_spi_d_agent_rp_data;                                                          // flash_spi_d_agent:rp_data -> router_018:sink_data
	wire          flash_spi_d_agent_rp_ready;                                                         // router_018:sink_ready -> flash_spi_d_agent:rp_ready
	wire          flash_spi_d_agent_rp_startofpacket;                                                 // flash_spi_d_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          flash_spi_d_agent_rp_endofpacket;                                                   // flash_spi_d_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_015:sink_valid
	wire  [123:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [23:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          nina_spi_d_agent_rp_valid;                                                          // nina_spi_d_agent:rp_valid -> router_019:sink_valid
	wire  [123:0] nina_spi_d_agent_rp_data;                                                           // nina_spi_d_agent:rp_data -> router_019:sink_data
	wire          nina_spi_d_agent_rp_ready;                                                          // router_019:sink_ready -> nina_spi_d_agent:rp_ready
	wire          nina_spi_d_agent_rp_startofpacket;                                                  // nina_spi_d_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          nina_spi_d_agent_rp_endofpacket;                                                    // nina_spi_d_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_016:sink_valid
	wire  [123:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_016:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_016:sink_ready -> router_019:src_ready
	wire   [23:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_016:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          sam_pio_s1_agent_rp_valid;                                                          // sam_pio_s1_agent:rp_valid -> router_020:sink_valid
	wire  [123:0] sam_pio_s1_agent_rp_data;                                                           // sam_pio_s1_agent:rp_data -> router_020:sink_data
	wire          sam_pio_s1_agent_rp_ready;                                                          // router_020:sink_ready -> sam_pio_s1_agent:rp_ready
	wire          sam_pio_s1_agent_rp_startofpacket;                                                  // sam_pio_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          sam_pio_s1_agent_rp_endofpacket;                                                    // sam_pio_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_017:sink_valid
	wire  [123:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_017:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_017:sink_ready -> router_020:src_ready
	wire   [23:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_017:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          pex_pio_s1_agent_rp_valid;                                                          // pex_pio_s1_agent:rp_valid -> router_021:sink_valid
	wire  [123:0] pex_pio_s1_agent_rp_data;                                                           // pex_pio_s1_agent:rp_data -> router_021:sink_data
	wire          pex_pio_s1_agent_rp_ready;                                                          // router_021:sink_ready -> pex_pio_s1_agent:rp_ready
	wire          pex_pio_s1_agent_rp_startofpacket;                                                  // pex_pio_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          pex_pio_s1_agent_rp_endofpacket;                                                    // pex_pio_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_018:sink_valid
	wire  [123:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_018:sink_data
	wire          router_021_src_ready;                                                               // rsp_demux_018:sink_ready -> router_021:src_ready
	wire   [23:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_018:sink_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          wm_pio_s1_agent_rp_valid;                                                           // wm_pio_s1_agent:rp_valid -> router_022:sink_valid
	wire  [123:0] wm_pio_s1_agent_rp_data;                                                            // wm_pio_s1_agent:rp_data -> router_022:sink_data
	wire          wm_pio_s1_agent_rp_ready;                                                           // router_022:sink_ready -> wm_pio_s1_agent:rp_ready
	wire          wm_pio_s1_agent_rp_startofpacket;                                                   // wm_pio_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          wm_pio_s1_agent_rp_endofpacket;                                                     // wm_pio_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_019:sink_valid
	wire  [123:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_019:sink_data
	wire          router_022_src_ready;                                                               // rsp_demux_019:sink_ready -> router_022:src_ready
	wire   [23:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_019:sink_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                          // timer_0_s1_agent:rp_valid -> router_023:sink_valid
	wire  [123:0] timer_0_s1_agent_rp_data;                                                           // timer_0_s1_agent:rp_data -> router_023:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                          // router_023:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                  // timer_0_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                    // timer_0_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_020:sink_valid
	wire  [123:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_020:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_020:sink_ready -> router_023:src_ready
	wire   [23:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_020:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_024:sink_valid
	wire  [123:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_024:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // router_024:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_021:sink_valid
	wire  [123:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_021:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_021:sink_ready -> router_024:src_ready
	wire   [23:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_021:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          mb_slv_agent_rp_valid;                                                              // mb_slv_agent:rp_valid -> router_025:sink_valid
	wire  [123:0] mb_slv_agent_rp_data;                                                               // mb_slv_agent:rp_data -> router_025:sink_data
	wire          mb_slv_agent_rp_ready;                                                              // router_025:sink_ready -> mb_slv_agent:rp_ready
	wire          mb_slv_agent_rp_startofpacket;                                                      // mb_slv_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          mb_slv_agent_rp_endofpacket;                                                        // mb_slv_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_022:sink_valid
	wire  [123:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_022:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_022:sink_ready -> router_025:src_ready
	wire   [23:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_022:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          onchip_memory2_0_s2_agent_rp_valid;                                                 // onchip_memory2_0_s2_agent:rp_valid -> router_026:sink_valid
	wire  [123:0] onchip_memory2_0_s2_agent_rp_data;                                                  // onchip_memory2_0_s2_agent:rp_data -> router_026:sink_data
	wire          onchip_memory2_0_s2_agent_rp_ready;                                                 // router_026:sink_ready -> onchip_memory2_0_s2_agent:rp_ready
	wire          onchip_memory2_0_s2_agent_rp_startofpacket;                                         // onchip_memory2_0_s2_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          onchip_memory2_0_s2_agent_rp_endofpacket;                                           // onchip_memory2_0_s2_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_023:sink_valid
	wire  [123:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_023:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_023:sink_ready -> router_026:src_ready
	wire   [23:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_023:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                               // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire  [105:0] sdram_s1_burst_adapter_source0_data;                                                // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                               // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [23:0] sdram_s1_burst_adapter_source0_channel;                                             // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                       // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                         // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> qspi_avl_mem_burst_adapter:sink0_valid
	wire  [123:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> qspi_avl_mem_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                              // qspi_avl_mem_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [23:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> qspi_avl_mem_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> qspi_avl_mem_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> qspi_avl_mem_burst_adapter:sink0_endofpacket
	wire          qspi_avl_mem_burst_adapter_source0_valid;                                           // qspi_avl_mem_burst_adapter:source0_valid -> qspi_avl_mem_agent:cp_valid
	wire  [123:0] qspi_avl_mem_burst_adapter_source0_data;                                            // qspi_avl_mem_burst_adapter:source0_data -> qspi_avl_mem_agent:cp_data
	wire          qspi_avl_mem_burst_adapter_source0_ready;                                           // qspi_avl_mem_agent:cp_ready -> qspi_avl_mem_burst_adapter:source0_ready
	wire   [23:0] qspi_avl_mem_burst_adapter_source0_channel;                                         // qspi_avl_mem_burst_adapter:source0_channel -> qspi_avl_mem_agent:cp_channel
	wire          qspi_avl_mem_burst_adapter_source0_startofpacket;                                   // qspi_avl_mem_burst_adapter:source0_startofpacket -> qspi_avl_mem_agent:cp_startofpacket
	wire          qspi_avl_mem_burst_adapter_source0_endofpacket;                                     // qspi_avl_mem_burst_adapter:source0_endofpacket -> qspi_avl_mem_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [123:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [23:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [123:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [23:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_001:sink0_valid
	wire  [123:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_001:sink0_ready -> cmd_demux_001:src1_ready
	wire   [23:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire  [123:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire   [23:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                           // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [123:0] cmd_demux_001_src3_data;                                                            // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                           // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire   [23:0] cmd_demux_001_src3_channel;                                                         // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                   // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                     // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                           // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [123:0] cmd_demux_001_src4_data;                                                            // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                           // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire   [23:0] cmd_demux_001_src4_channel;                                                         // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                   // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                     // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                           // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire  [123:0] cmd_demux_001_src5_data;                                                            // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src5_ready;                                                           // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire   [23:0] cmd_demux_001_src5_channel;                                                         // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                   // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                     // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                           // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [123:0] cmd_demux_001_src6_data;                                                            // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                           // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire   [23:0] cmd_demux_001_src6_channel;                                                         // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                   // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                     // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                           // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire  [123:0] cmd_demux_001_src9_data;                                                            // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src9_ready;                                                           // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire   [23:0] cmd_demux_001_src9_channel;                                                         // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                   // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                     // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                          // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire  [123:0] cmd_demux_001_src10_data;                                                           // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src10_ready;                                                          // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire   [23:0] cmd_demux_001_src10_channel;                                                        // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                  // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                    // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                          // cmd_demux_001:src11_valid -> cmd_mux_011:sink0_valid
	wire  [123:0] cmd_demux_001_src11_data;                                                           // cmd_demux_001:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_001_src11_ready;                                                          // cmd_mux_011:sink0_ready -> cmd_demux_001:src11_ready
	wire   [23:0] cmd_demux_001_src11_channel;                                                        // cmd_demux_001:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_001_src11_startofpacket;                                                  // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                    // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                          // cmd_demux_001:src12_valid -> cmd_mux_012:sink0_valid
	wire  [123:0] cmd_demux_001_src12_data;                                                           // cmd_demux_001:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_001_src12_ready;                                                          // cmd_mux_012:sink0_ready -> cmd_demux_001:src12_ready
	wire   [23:0] cmd_demux_001_src12_channel;                                                        // cmd_demux_001:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_001_src12_startofpacket;                                                  // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                    // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                          // cmd_demux_001:src13_valid -> cmd_mux_013:sink0_valid
	wire  [123:0] cmd_demux_001_src13_data;                                                           // cmd_demux_001:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_001_src13_ready;                                                          // cmd_mux_013:sink0_ready -> cmd_demux_001:src13_ready
	wire   [23:0] cmd_demux_001_src13_channel;                                                        // cmd_demux_001:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_001_src13_startofpacket;                                                  // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                    // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_001_src14_valid;                                                          // cmd_demux_001:src14_valid -> cmd_mux_014:sink0_valid
	wire  [123:0] cmd_demux_001_src14_data;                                                           // cmd_demux_001:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_001_src14_ready;                                                          // cmd_mux_014:sink0_ready -> cmd_demux_001:src14_ready
	wire   [23:0] cmd_demux_001_src14_channel;                                                        // cmd_demux_001:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_001_src14_startofpacket;                                                  // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                    // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                                          // cmd_demux_001:src15_valid -> cmd_mux_015:sink0_valid
	wire  [123:0] cmd_demux_001_src15_data;                                                           // cmd_demux_001:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_001_src15_ready;                                                          // cmd_mux_015:sink0_ready -> cmd_demux_001:src15_ready
	wire   [23:0] cmd_demux_001_src15_channel;                                                        // cmd_demux_001:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_001_src15_startofpacket;                                                  // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                    // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src16_valid;                                                          // cmd_demux_001:src16_valid -> cmd_mux_016:sink0_valid
	wire  [123:0] cmd_demux_001_src16_data;                                                           // cmd_demux_001:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_001_src16_ready;                                                          // cmd_mux_016:sink0_ready -> cmd_demux_001:src16_ready
	wire   [23:0] cmd_demux_001_src16_channel;                                                        // cmd_demux_001:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_001_src16_startofpacket;                                                  // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                    // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src17_valid;                                                          // cmd_demux_001:src17_valid -> cmd_mux_017:sink0_valid
	wire  [123:0] cmd_demux_001_src17_data;                                                           // cmd_demux_001:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_001_src17_ready;                                                          // cmd_mux_017:sink0_ready -> cmd_demux_001:src17_ready
	wire   [23:0] cmd_demux_001_src17_channel;                                                        // cmd_demux_001:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_001_src17_startofpacket;                                                  // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                    // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src18_valid;                                                          // cmd_demux_001:src18_valid -> cmd_mux_018:sink0_valid
	wire  [123:0] cmd_demux_001_src18_data;                                                           // cmd_demux_001:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_001_src18_ready;                                                          // cmd_mux_018:sink0_ready -> cmd_demux_001:src18_ready
	wire   [23:0] cmd_demux_001_src18_channel;                                                        // cmd_demux_001:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_001_src18_startofpacket;                                                  // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                    // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src19_valid;                                                          // cmd_demux_001:src19_valid -> cmd_mux_019:sink0_valid
	wire  [123:0] cmd_demux_001_src19_data;                                                           // cmd_demux_001:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_001_src19_ready;                                                          // cmd_mux_019:sink0_ready -> cmd_demux_001:src19_ready
	wire   [23:0] cmd_demux_001_src19_channel;                                                        // cmd_demux_001:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_001_src19_startofpacket;                                                  // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                    // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src20_valid;                                                          // cmd_demux_001:src20_valid -> cmd_mux_020:sink0_valid
	wire  [123:0] cmd_demux_001_src20_data;                                                           // cmd_demux_001:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_001_src20_ready;                                                          // cmd_mux_020:sink0_ready -> cmd_demux_001:src20_ready
	wire   [23:0] cmd_demux_001_src20_channel;                                                        // cmd_demux_001:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_001_src20_startofpacket;                                                  // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                    // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src21_valid;                                                          // cmd_demux_001:src21_valid -> cmd_mux_021:sink0_valid
	wire  [123:0] cmd_demux_001_src21_data;                                                           // cmd_demux_001:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_001_src21_ready;                                                          // cmd_mux_021:sink0_ready -> cmd_demux_001:src21_ready
	wire   [23:0] cmd_demux_001_src21_channel;                                                        // cmd_demux_001:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_001_src21_startofpacket;                                                  // cmd_demux_001:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                                    // cmd_demux_001:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src22_valid;                                                          // cmd_demux_001:src22_valid -> cmd_mux_022:sink0_valid
	wire  [123:0] cmd_demux_001_src22_data;                                                           // cmd_demux_001:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_001_src22_ready;                                                          // cmd_mux_022:sink0_ready -> cmd_demux_001:src22_ready
	wire   [23:0] cmd_demux_001_src22_channel;                                                        // cmd_demux_001:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_001_src22_startofpacket;                                                  // cmd_demux_001:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                                    // cmd_demux_001:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_002_src1_valid;                                                           // cmd_demux_002:src1_valid -> cmd_mux_023:sink0_valid
	wire  [123:0] cmd_demux_002_src1_data;                                                            // cmd_demux_002:src1_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_002_src1_ready;                                                           // cmd_mux_023:sink0_ready -> cmd_demux_002:src1_ready
	wire   [23:0] cmd_demux_002_src1_channel;                                                         // cmd_demux_002:src1_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                   // cmd_demux_002:src1_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                     // cmd_demux_002:src1_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [123:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [23:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [123:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [23:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux_001:sink1_valid
	wire  [123:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_001:src0_ready
	wire   [23:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire  [123:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire   [23:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [123:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire   [23:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [123:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire   [23:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire  [123:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire   [23:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [123:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire   [23:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire  [123:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire   [23:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire  [123:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire   [23:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux_001:sink11_valid
	wire  [123:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux_001:sink11_ready -> rsp_demux_011:src0_ready
	wire   [23:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux_001:sink12_valid
	wire  [123:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux_001:sink12_ready -> rsp_demux_012:src0_ready
	wire   [23:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux_001:sink13_valid
	wire  [123:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux_001:sink13_ready -> rsp_demux_013:src0_ready
	wire   [23:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux_001:sink14_valid
	wire  [123:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux_001:sink14_ready -> rsp_demux_014:src0_ready
	wire   [23:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux_001:sink15_valid
	wire  [123:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux_001:sink15_ready -> rsp_demux_015:src0_ready
	wire   [23:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux_001:sink16_valid
	wire  [123:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux_001:sink16_ready -> rsp_demux_016:src0_ready
	wire   [23:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux_001:sink17_valid
	wire  [123:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux_001:sink17_ready -> rsp_demux_017:src0_ready
	wire   [23:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux_001:sink18_valid
	wire  [123:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux_001:sink18_ready -> rsp_demux_018:src0_ready
	wire   [23:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux_001:sink19_valid
	wire  [123:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux_001:sink19_ready -> rsp_demux_019:src0_ready
	wire   [23:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux_001:sink20_valid
	wire  [123:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux_001:sink20_ready -> rsp_demux_020:src0_ready
	wire   [23:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux_001:sink21_valid
	wire  [123:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux_001:sink21_ready -> rsp_demux_021:src0_ready
	wire   [23:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                           // rsp_demux_022:src0_valid -> rsp_mux_001:sink22_valid
	wire  [123:0] rsp_demux_022_src0_data;                                                            // rsp_demux_022:src0_data -> rsp_mux_001:sink22_data
	wire          rsp_demux_022_src0_ready;                                                           // rsp_mux_001:sink22_ready -> rsp_demux_022:src0_ready
	wire   [23:0] rsp_demux_022_src0_channel;                                                         // rsp_demux_022:src0_channel -> rsp_mux_001:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                   // rsp_demux_022:src0_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                     // rsp_demux_022:src0_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                           // rsp_demux_023:src0_valid -> rsp_mux_002:sink1_valid
	wire  [123:0] rsp_demux_023_src0_data;                                                            // rsp_demux_023:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_023_src0_ready;                                                           // rsp_mux_002:sink1_ready -> rsp_demux_023:src0_ready
	wire   [23:0] rsp_demux_023_src0_channel;                                                         // rsp_demux_023:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_023_src0_startofpacket;                                                   // rsp_demux_023:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                     // rsp_demux_023:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> sdram_s1_rsp_width_adapter:in_valid
	wire  [105:0] router_003_src_data;                                                                // router_003:src_data -> sdram_s1_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                               // sdram_s1_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [23:0] router_003_src_channel;                                                             // router_003:src_channel -> sdram_s1_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> sdram_s1_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> sdram_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                               // sdram_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [123:0] sdram_s1_rsp_width_adapter_src_data;                                                // sdram_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                               // rsp_demux:sink_ready -> sdram_s1_rsp_width_adapter:out_ready
	wire   [23:0] sdram_s1_rsp_width_adapter_src_channel;                                             // sdram_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                                       // sdram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                         // sdram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> sdram_s1_cmd_width_adapter:in_valid
	wire  [123:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> sdram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                  // sdram_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [23:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> sdram_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                               // sdram_s1_cmd_width_adapter:out_valid -> sdram_s1_burst_adapter:sink0_valid
	wire  [105:0] sdram_s1_cmd_width_adapter_src_data;                                                // sdram_s1_cmd_width_adapter:out_data -> sdram_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                               // sdram_s1_burst_adapter:sink0_ready -> sdram_s1_cmd_width_adapter:out_ready
	wire   [23:0] sdram_s1_cmd_width_adapter_src_channel;                                             // sdram_s1_cmd_width_adapter:out_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                                       // sdram_s1_cmd_width_adapter:out_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                         // sdram_s1_cmd_width_adapter:out_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                           // cmd_demux_001:src7_valid -> crosser:in_valid
	wire  [123:0] cmd_demux_001_src7_data;                                                            // cmd_demux_001:src7_data -> crosser:in_data
	wire          cmd_demux_001_src7_ready;                                                           // crosser:in_ready -> cmd_demux_001:src7_ready
	wire   [23:0] cmd_demux_001_src7_channel;                                                         // cmd_demux_001:src7_channel -> crosser:in_channel
	wire          cmd_demux_001_src7_startofpacket;                                                   // cmd_demux_001:src7_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                     // cmd_demux_001:src7_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_007:sink0_valid
	wire  [123:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_007:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux_007:sink0_ready -> crosser:out_ready
	wire   [23:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                           // cmd_demux_001:src8_valid -> crosser_001:in_valid
	wire  [123:0] cmd_demux_001_src8_data;                                                            // cmd_demux_001:src8_data -> crosser_001:in_data
	wire          cmd_demux_001_src8_ready;                                                           // crosser_001:in_ready -> cmd_demux_001:src8_ready
	wire   [23:0] cmd_demux_001_src8_channel;                                                         // cmd_demux_001:src8_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src8_startofpacket;                                                   // cmd_demux_001:src8_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                     // cmd_demux_001:src8_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_008:sink0_valid
	wire  [123:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_008:sink0_data
	wire          crosser_001_out_ready;                                                              // cmd_mux_008:sink0_ready -> crosser_001:out_ready
	wire   [23:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> crosser_002:in_valid
	wire  [123:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> crosser_002:in_data
	wire          cmd_demux_002_src0_ready;                                                           // crosser_002:in_ready -> cmd_demux_002:src0_ready
	wire   [23:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> cmd_mux_008:sink1_valid
	wire  [123:0] crosser_002_out_data;                                                               // crosser_002:out_data -> cmd_mux_008:sink1_data
	wire          crosser_002_out_ready;                                                              // cmd_mux_008:sink1_ready -> crosser_002:out_ready
	wire   [23:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> cmd_mux_008:sink1_channel
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> crosser_003:in_valid
	wire  [123:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> crosser_003:in_data
	wire          rsp_demux_007_src0_ready;                                                           // crosser_003:in_ready -> rsp_demux_007:src0_ready
	wire   [23:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> rsp_mux_001:sink7_valid
	wire  [123:0] crosser_003_out_data;                                                               // crosser_003:out_data -> rsp_mux_001:sink7_data
	wire          crosser_003_out_ready;                                                              // rsp_mux_001:sink7_ready -> crosser_003:out_ready
	wire   [23:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> rsp_mux_001:sink7_channel
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> crosser_004:in_valid
	wire  [123:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> crosser_004:in_data
	wire          rsp_demux_008_src0_ready;                                                           // crosser_004:in_ready -> rsp_demux_008:src0_ready
	wire   [23:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                              // crosser_004:out_valid -> rsp_mux_001:sink8_valid
	wire  [123:0] crosser_004_out_data;                                                               // crosser_004:out_data -> rsp_mux_001:sink8_data
	wire          crosser_004_out_ready;                                                              // rsp_mux_001:sink8_ready -> crosser_004:out_ready
	wire   [23:0] crosser_004_out_channel;                                                            // crosser_004:out_channel -> rsp_mux_001:sink8_channel
	wire          crosser_004_out_startofpacket;                                                      // crosser_004:out_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          crosser_004_out_endofpacket;                                                        // crosser_004:out_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                           // rsp_demux_008:src1_valid -> crosser_005:in_valid
	wire  [123:0] rsp_demux_008_src1_data;                                                            // rsp_demux_008:src1_data -> crosser_005:in_data
	wire          rsp_demux_008_src1_ready;                                                           // crosser_005:in_ready -> rsp_demux_008:src1_ready
	wire   [23:0] rsp_demux_008_src1_channel;                                                         // rsp_demux_008:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_008_src1_startofpacket;                                                   // rsp_demux_008:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                     // rsp_demux_008:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                              // crosser_005:out_valid -> rsp_mux_002:sink0_valid
	wire  [123:0] crosser_005_out_data;                                                               // crosser_005:out_data -> rsp_mux_002:sink0_data
	wire          crosser_005_out_ready;                                                              // rsp_mux_002:sink0_ready -> crosser_005:out_ready
	wire   [23:0] crosser_005_out_channel;                                                            // crosser_005:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_005_out_startofpacket;                                                      // crosser_005:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                        // crosser_005:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                 // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          sam_pwm_avalon_slave_0_agent_rdata_fifo_src_valid;                                  // sam_pwm_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sam_pwm_avalon_slave_0_agent_rdata_fifo_src_data;                                   // sam_pwm_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          sam_pwm_avalon_slave_0_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_001:in_0_ready -> sam_pwm_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> sam_pwm_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> sam_pwm_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // sam_pwm_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> sam_pwm_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_valid;                           // QUAD_ENCODER_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_data;                            // QUAD_ENCODER_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_002:in_0_ready -> QUAD_ENCODER_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> QUAD_ENCODER_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> QUAD_ENCODER_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // QUAD_ENCODER_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> QUAD_ENCODER_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          i2c_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                    // i2c_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] i2c_0_avalon_slave_0_agent_rdata_fifo_src_data;                                     // i2c_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          i2c_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_003:in_0_ready -> i2c_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> i2c_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> i2c_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // i2c_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> i2c_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          i2c_1_avalon_slave_0_agent_rdata_fifo_src_valid;                                    // i2c_1_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] i2c_1_avalon_slave_0_agent_rdata_fifo_src_data;                                     // i2c_1_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          i2c_1_avalon_slave_0_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_004:in_0_ready -> i2c_1_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> i2c_1_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> i2c_1_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // i2c_1_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> i2c_1_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          i2c_3_avalon_slave_0_agent_rdata_fifo_src_valid;                                    // i2c_3_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] i2c_3_avalon_slave_0_agent_rdata_fifo_src_data;                                     // i2c_3_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          i2c_3_avalon_slave_0_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_005:in_0_ready -> i2c_3_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> i2c_3_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> i2c_3_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // i2c_3_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> i2c_3_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          i2c_2_avalon_slave_0_agent_rdata_fifo_src_valid;                                    // i2c_2_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] i2c_2_avalon_slave_0_agent_rdata_fifo_src_data;                                     // i2c_2_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          i2c_2_avalon_slave_0_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_006:in_0_ready -> i2c_2_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> i2c_2_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> i2c_2_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // i2c_2_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> i2c_2_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          qspi_avl_csr_agent_rdata_fifo_out_valid;                                            // qspi_avl_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] qspi_avl_csr_agent_rdata_fifo_out_data;                                             // qspi_avl_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          qspi_avl_csr_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_007:in_0_ready -> qspi_avl_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> qspi_avl_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> qspi_avl_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // qspi_avl_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> qspi_avl_csr_agent:rdata_fifo_sink_error
	wire          qspi_avl_mem_agent_rdata_fifo_out_valid;                                            // qspi_avl_mem_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] qspi_avl_mem_agent_rdata_fifo_out_data;                                             // qspi_avl_mem_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          qspi_avl_mem_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_008:in_0_ready -> qspi_avl_mem_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> qspi_avl_mem_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> qspi_avl_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // qspi_avl_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> qspi_avl_mem_agent:rdata_fifo_sink_error
	wire          neopixel_0_csr_agent_rdata_fifo_src_valid;                                          // NEOPIXEL_0_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] neopixel_0_csr_agent_rdata_fifo_src_data;                                           // NEOPIXEL_0_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          neopixel_0_csr_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_009:in_0_ready -> NEOPIXEL_0_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> NEOPIXEL_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> NEOPIXEL_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // NEOPIXEL_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> NEOPIXEL_0_csr_agent:rdata_fifo_sink_error
	wire          tspi_0_d_agent_rdata_fifo_src_valid;                                                // tspi_0_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] tspi_0_d_agent_rdata_fifo_src_data;                                                 // tspi_0_d_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          tspi_0_d_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_010:in_0_ready -> tspi_0_d_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> tspi_0_d_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> tspi_0_d_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // tspi_0_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> tspi_0_d_agent:rdata_fifo_sink_error
	wire          tspi_1_d_agent_rdata_fifo_src_valid;                                                // tspi_1_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] tspi_1_d_agent_rdata_fifo_src_data;                                                 // tspi_1_d_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          tspi_1_d_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_011:in_0_ready -> tspi_1_d_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> tspi_1_d_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> tspi_1_d_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // tspi_1_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> tspi_1_d_agent:rdata_fifo_sink_error
	wire          tspi_2_d_agent_rdata_fifo_src_valid;                                                // tspi_2_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] tspi_2_d_agent_rdata_fifo_src_data;                                                 // tspi_2_d_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          tspi_2_d_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_012:in_0_ready -> tspi_2_d_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> tspi_2_d_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> tspi_2_d_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // tspi_2_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> tspi_2_d_agent:rdata_fifo_sink_error
	wire          tspi_3_d_agent_rdata_fifo_src_valid;                                                // tspi_3_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] tspi_3_d_agent_rdata_fifo_src_data;                                                 // tspi_3_d_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          tspi_3_d_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_013:in_0_ready -> tspi_3_d_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> tspi_3_d_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> tspi_3_d_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // tspi_3_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> tspi_3_d_agent:rdata_fifo_sink_error
	wire          tspi_4_d_agent_rdata_fifo_src_valid;                                                // tspi_4_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] tspi_4_d_agent_rdata_fifo_src_data;                                                 // tspi_4_d_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          tspi_4_d_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_014:in_0_ready -> tspi_4_d_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> tspi_4_d_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> tspi_4_d_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // tspi_4_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> tspi_4_d_agent:rdata_fifo_sink_error
	wire          flash_spi_d_agent_rdata_fifo_src_valid;                                             // flash_spi_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] flash_spi_d_agent_rdata_fifo_src_data;                                              // flash_spi_d_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          flash_spi_d_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_015:in_0_ready -> flash_spi_d_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> flash_spi_d_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> flash_spi_d_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // flash_spi_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> flash_spi_d_agent:rdata_fifo_sink_error
	wire          nina_spi_d_agent_rdata_fifo_src_valid;                                              // nina_spi_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] nina_spi_d_agent_rdata_fifo_src_data;                                               // nina_spi_d_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          nina_spi_d_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_016:in_0_ready -> nina_spi_d_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> nina_spi_d_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> nina_spi_d_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // nina_spi_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> nina_spi_d_agent:rdata_fifo_sink_error
	wire          sam_pio_s1_agent_rdata_fifo_src_valid;                                              // sam_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] sam_pio_s1_agent_rdata_fifo_src_data;                                               // sam_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          sam_pio_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_017:in_0_ready -> sam_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> sam_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> sam_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                  // sam_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> sam_pio_s1_agent:rdata_fifo_sink_error
	wire          pex_pio_s1_agent_rdata_fifo_src_valid;                                              // pex_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] pex_pio_s1_agent_rdata_fifo_src_data;                                               // pex_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          pex_pio_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_018:in_0_ready -> pex_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> pex_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> pex_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                  // pex_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> pex_pio_s1_agent:rdata_fifo_sink_error
	wire          wm_pio_s1_agent_rdata_fifo_src_valid;                                               // wm_pio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] wm_pio_s1_agent_rdata_fifo_src_data;                                                // wm_pio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          wm_pio_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_019:in_0_ready -> wm_pio_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                  // avalon_st_adapter_019:out_0_valid -> wm_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                   // avalon_st_adapter_019:out_0_data -> wm_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                  // wm_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                  // avalon_st_adapter_019:out_0_error -> wm_pio_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                              // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                               // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_020:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                  // avalon_st_adapter_020:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                   // avalon_st_adapter_020:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                  // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                  // avalon_st_adapter_020:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_021:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                  // avalon_st_adapter_021:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                   // avalon_st_adapter_021:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                  // avalon_st_adapter_021:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          mb_slv_agent_rdata_fifo_src_valid;                                                  // mb_slv_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] mb_slv_agent_rdata_fifo_src_data;                                                   // mb_slv_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          mb_slv_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_022:in_0_ready -> mb_slv_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                  // avalon_st_adapter_022:out_0_valid -> mb_slv_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                   // avalon_st_adapter_022:out_0_data -> mb_slv_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                  // mb_slv_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                  // avalon_st_adapter_022:out_0_error -> mb_slv_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] onchip_memory2_0_s2_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s2_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_023:in_0_ready -> onchip_memory2_0_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                  // avalon_st_adapter_023:out_0_valid -> onchip_memory2_0_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                   // avalon_st_adapter_023:out_0_data -> onchip_memory2_0_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                  // onchip_memory2_0_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                  // avalon_st_adapter_023:out_0_error -> onchip_memory2_0_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (7),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) neopixel_0_data_translator (
		.clk                    (clk_clk_clk),                                                        //                       clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                       //                     reset.reset
		.uav_address            (neopixel_0_data_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (neopixel_0_data_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (neopixel_0_data_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (neopixel_0_data_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (neopixel_0_data_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (neopixel_0_data_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (neopixel_0_data_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (neopixel_0_data_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (neopixel_0_data_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (neopixel_0_data_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (neopixel_0_data_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (NEOPIXEL_0_data_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (NEOPIXEL_0_data_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (NEOPIXEL_0_data_burstcount),                                         //                          .burstcount
		.av_read                (NEOPIXEL_0_data_read),                                               //                          .read
		.av_readdata            (NEOPIXEL_0_data_readdata),                                           //                          .readdata
		.av_readdatavalid       (NEOPIXEL_0_data_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (4'b1111),                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_write               (1'b0),                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_clk_clk),                                                                 //                       clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_clk_clk),                                                                        //                       clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                       //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sdram_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                               //                         .write
		.av_read                (sdram_s1_read),                                //                         .read
		.av_readdata            (sdram_s1_readdata),                            //                         .readdata
		.av_writedata           (sdram_s1_writedata),                           //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                          //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                       //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                         //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sam_pwm_avalon_slave_0_translator (
		.clk                    (clk_clk_clk),                                   //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (sam_pwm_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sam_pwm_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sam_pwm_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (sam_pwm_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (sam_pwm_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sam_pwm_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sam_pwm_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sam_pwm_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sam_pwm_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sam_pwm_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sam_pwm_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sam_pwm_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (sam_pwm_avalon_slave_0_write),                  //                         .write
		.av_writedata           (sam_pwm_avalon_slave_0_writedata),              //                         .writedata
		.av_read                (),                                              //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),          //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_encoder_0_avalon_slave_0_translator (
		.clk                    (clk_clk_clk),                                          //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (quad_encoder_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (quad_encoder_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (quad_encoder_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (quad_encoder_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (quad_encoder_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (quad_encoder_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (quad_encoder_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (quad_encoder_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (quad_encoder_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (quad_encoder_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (quad_encoder_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (QUAD_ENCODER_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_read                (QUAD_ENCODER_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (QUAD_ENCODER_0_avalon_slave_0_readdata),               //                         .readdata
		.av_write               (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_0_avalon_slave_0_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_0_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_0_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (i2c_0_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (i2c_0_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (i2c_0_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (i2c_0_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (i2c_0_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (i2c_0_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (i2c_0_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (i2c_0_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (i2c_0_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (i2c_0_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (i2c_0_avalon_slave_0_write),                   //                         .write
		.av_readdata            (i2c_0_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (i2c_0_avalon_slave_0_writedata),               //                         .writedata
		.av_waitrequest         (i2c_0_avalon_slave_0_waitrequest),             //                         .waitrequest
		.av_chipselect          (i2c_0_avalon_slave_0_chipselect),              //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_1_avalon_slave_0_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_1_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_1_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (i2c_1_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (i2c_1_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (i2c_1_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (i2c_1_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (i2c_1_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (i2c_1_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (i2c_1_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (i2c_1_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (i2c_1_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (i2c_1_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (i2c_1_avalon_slave_0_write),                   //                         .write
		.av_readdata            (i2c_1_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (i2c_1_avalon_slave_0_writedata),               //                         .writedata
		.av_waitrequest         (i2c_1_avalon_slave_0_waitrequest),             //                         .waitrequest
		.av_chipselect          (i2c_1_avalon_slave_0_chipselect),              //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_3_avalon_slave_0_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_3_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_3_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (i2c_3_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (i2c_3_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (i2c_3_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (i2c_3_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (i2c_3_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (i2c_3_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (i2c_3_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (i2c_3_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (i2c_3_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (i2c_3_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (i2c_3_avalon_slave_0_write),                   //                         .write
		.av_readdata            (i2c_3_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (i2c_3_avalon_slave_0_writedata),               //                         .writedata
		.av_waitrequest         (i2c_3_avalon_slave_0_waitrequest),             //                         .waitrequest
		.av_chipselect          (i2c_3_avalon_slave_0_chipselect),              //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_2_avalon_slave_0_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_2_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_2_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (i2c_2_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (i2c_2_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (i2c_2_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (i2c_2_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (i2c_2_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (i2c_2_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (i2c_2_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (i2c_2_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (i2c_2_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (i2c_2_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (i2c_2_avalon_slave_0_write),                   //                         .write
		.av_readdata            (i2c_2_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (i2c_2_avalon_slave_0_writedata),               //                         .writedata
		.av_waitrequest         (i2c_2_avalon_slave_0_waitrequest),             //                         .waitrequest
		.av_chipselect          (i2c_2_avalon_slave_0_chipselect),              //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) qspi_avl_csr_translator (
		.clk                    (flash_clk_clk_clk),                      //                      clk.clk
		.reset                  (qspi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (qspi_avl_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (qspi_avl_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (qspi_avl_csr_agent_m0_read),             //                         .read
		.uav_write              (qspi_avl_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (qspi_avl_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (qspi_avl_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (qspi_avl_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (qspi_avl_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (qspi_avl_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (qspi_avl_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (qspi_avl_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (qspi_avl_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (qspi_avl_csr_write),                     //                         .write
		.av_read                (qspi_avl_csr_read),                      //                         .read
		.av_readdata            (qspi_avl_csr_readdata),                  //                         .readdata
		.av_writedata           (qspi_avl_csr_writedata),                 //                         .writedata
		.av_readdatavalid       (qspi_avl_csr_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (qspi_avl_csr_waitrequest),               //                         .waitrequest
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_burstcount          (),                                       //              (terminated)
		.av_byteenable          (),                                       //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_chipselect          (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (1),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) qspi_avl_mem_translator (
		.clk                    (flash_clk_clk_clk),                      //                      clk.clk
		.reset                  (qspi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (qspi_avl_mem_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (qspi_avl_mem_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (qspi_avl_mem_agent_m0_read),             //                         .read
		.uav_write              (qspi_avl_mem_agent_m0_write),            //                         .write
		.uav_waitrequest        (qspi_avl_mem_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (qspi_avl_mem_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (qspi_avl_mem_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (qspi_avl_mem_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (qspi_avl_mem_agent_m0_writedata),        //                         .writedata
		.uav_lock               (qspi_avl_mem_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (qspi_avl_mem_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (qspi_avl_mem_address),                   //      avalon_anti_slave_0.address
		.av_write               (qspi_avl_mem_write),                     //                         .write
		.av_read                (qspi_avl_mem_read),                      //                         .read
		.av_readdata            (qspi_avl_mem_readdata),                  //                         .readdata
		.av_writedata           (qspi_avl_mem_writedata),                 //                         .writedata
		.av_burstcount          (qspi_avl_mem_burstcount),                //                         .burstcount
		.av_byteenable          (qspi_avl_mem_byteenable),                //                         .byteenable
		.av_readdatavalid       (qspi_avl_mem_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (qspi_avl_mem_waitrequest),               //                         .waitrequest
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_chipselect          (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) neopixel_0_csr_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (neopixel_0_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (neopixel_0_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (neopixel_0_csr_agent_m0_read),                 //                         .read
		.uav_write              (neopixel_0_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (neopixel_0_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (neopixel_0_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (neopixel_0_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (neopixel_0_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (neopixel_0_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (neopixel_0_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (neopixel_0_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (NEOPIXEL_0_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (NEOPIXEL_0_csr_write),                         //                         .write
		.av_read                (NEOPIXEL_0_csr_read),                          //                         .read
		.av_readdata            (NEOPIXEL_0_csr_readdata),                      //                         .readdata
		.av_writedata           (NEOPIXEL_0_csr_writedata),                     //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tspi_0_d_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tspi_0_d_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (tspi_0_d_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (tspi_0_d_agent_m0_read),                       //                         .read
		.uav_write              (tspi_0_d_agent_m0_write),                      //                         .write
		.uav_waitrequest        (tspi_0_d_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (tspi_0_d_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (tspi_0_d_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (tspi_0_d_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (tspi_0_d_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (tspi_0_d_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (tspi_0_d_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (tspi_0_d_address),                             //      avalon_anti_slave_0.address
		.av_write               (tspi_0_d_write),                               //                         .write
		.av_readdata            (tspi_0_d_readdata),                            //                         .readdata
		.av_writedata           (tspi_0_d_writedata),                           //                         .writedata
		.av_chipselect          (tspi_0_d_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tspi_1_d_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tspi_1_d_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (tspi_1_d_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (tspi_1_d_agent_m0_read),                       //                         .read
		.uav_write              (tspi_1_d_agent_m0_write),                      //                         .write
		.uav_waitrequest        (tspi_1_d_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (tspi_1_d_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (tspi_1_d_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (tspi_1_d_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (tspi_1_d_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (tspi_1_d_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (tspi_1_d_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (tspi_1_d_address),                             //      avalon_anti_slave_0.address
		.av_write               (tspi_1_d_write),                               //                         .write
		.av_readdata            (tspi_1_d_readdata),                            //                         .readdata
		.av_writedata           (tspi_1_d_writedata),                           //                         .writedata
		.av_chipselect          (tspi_1_d_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tspi_2_d_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tspi_2_d_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (tspi_2_d_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (tspi_2_d_agent_m0_read),                       //                         .read
		.uav_write              (tspi_2_d_agent_m0_write),                      //                         .write
		.uav_waitrequest        (tspi_2_d_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (tspi_2_d_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (tspi_2_d_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (tspi_2_d_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (tspi_2_d_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (tspi_2_d_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (tspi_2_d_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (tspi_2_d_address),                             //      avalon_anti_slave_0.address
		.av_write               (tspi_2_d_write),                               //                         .write
		.av_readdata            (tspi_2_d_readdata),                            //                         .readdata
		.av_writedata           (tspi_2_d_writedata),                           //                         .writedata
		.av_chipselect          (tspi_2_d_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tspi_3_d_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tspi_3_d_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (tspi_3_d_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (tspi_3_d_agent_m0_read),                       //                         .read
		.uav_write              (tspi_3_d_agent_m0_write),                      //                         .write
		.uav_waitrequest        (tspi_3_d_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (tspi_3_d_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (tspi_3_d_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (tspi_3_d_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (tspi_3_d_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (tspi_3_d_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (tspi_3_d_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (tspi_3_d_address),                             //      avalon_anti_slave_0.address
		.av_write               (tspi_3_d_write),                               //                         .write
		.av_readdata            (tspi_3_d_readdata),                            //                         .readdata
		.av_writedata           (tspi_3_d_writedata),                           //                         .writedata
		.av_chipselect          (tspi_3_d_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tspi_4_d_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (tspi_4_d_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (tspi_4_d_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (tspi_4_d_agent_m0_read),                       //                         .read
		.uav_write              (tspi_4_d_agent_m0_write),                      //                         .write
		.uav_waitrequest        (tspi_4_d_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (tspi_4_d_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (tspi_4_d_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (tspi_4_d_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (tspi_4_d_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (tspi_4_d_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (tspi_4_d_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (tspi_4_d_address),                             //      avalon_anti_slave_0.address
		.av_write               (tspi_4_d_write),                               //                         .write
		.av_readdata            (tspi_4_d_readdata),                            //                         .readdata
		.av_writedata           (tspi_4_d_writedata),                           //                         .writedata
		.av_chipselect          (tspi_4_d_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) flash_spi_d_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flash_spi_d_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (flash_spi_d_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (flash_spi_d_agent_m0_read),                    //                         .read
		.uav_write              (flash_spi_d_agent_m0_write),                   //                         .write
		.uav_waitrequest        (flash_spi_d_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (flash_spi_d_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (flash_spi_d_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (flash_spi_d_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (flash_spi_d_agent_m0_writedata),               //                         .writedata
		.uav_lock               (flash_spi_d_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (flash_spi_d_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (flash_spi_d_address),                          //      avalon_anti_slave_0.address
		.av_write               (flash_spi_d_write),                            //                         .write
		.av_readdata            (flash_spi_d_readdata),                         //                         .readdata
		.av_writedata           (flash_spi_d_writedata),                        //                         .writedata
		.av_chipselect          (flash_spi_d_chipselect),                       //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nina_spi_d_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nina_spi_d_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (nina_spi_d_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (nina_spi_d_agent_m0_read),                     //                         .read
		.uav_write              (nina_spi_d_agent_m0_write),                    //                         .write
		.uav_waitrequest        (nina_spi_d_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (nina_spi_d_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (nina_spi_d_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (nina_spi_d_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (nina_spi_d_agent_m0_writedata),                //                         .writedata
		.uav_lock               (nina_spi_d_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (nina_spi_d_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (nina_spi_d_address),                           //      avalon_anti_slave_0.address
		.av_write               (nina_spi_d_write),                             //                         .write
		.av_readdata            (nina_spi_d_readdata),                          //                         .readdata
		.av_writedata           (nina_spi_d_writedata),                         //                         .writedata
		.av_chipselect          (nina_spi_d_chipselect),                        //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sam_pio_s1_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sam_pio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sam_pio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sam_pio_s1_agent_m0_read),                     //                         .read
		.uav_write              (sam_pio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sam_pio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sam_pio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sam_pio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sam_pio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sam_pio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sam_pio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sam_pio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sam_pio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (sam_pio_s1_write),                             //                         .write
		.av_read                (sam_pio_s1_read),                              //                         .read
		.av_readdata            (sam_pio_s1_readdata),                          //                         .readdata
		.av_writedata           (sam_pio_s1_writedata),                         //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pex_pio_s1_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pex_pio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (pex_pio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (pex_pio_s1_agent_m0_read),                     //                         .read
		.uav_write              (pex_pio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (pex_pio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (pex_pio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (pex_pio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (pex_pio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (pex_pio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (pex_pio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (pex_pio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (pex_pio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (pex_pio_s1_write),                             //                         .write
		.av_read                (pex_pio_s1_read),                              //                         .read
		.av_readdata            (pex_pio_s1_readdata),                          //                         .readdata
		.av_writedata           (pex_pio_s1_writedata),                         //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) wm_pio_s1_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (wm_pio_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (wm_pio_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (wm_pio_s1_agent_m0_read),                      //                         .read
		.uav_write              (wm_pio_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (wm_pio_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (wm_pio_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (wm_pio_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (wm_pio_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (wm_pio_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (wm_pio_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (wm_pio_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (wm_pio_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (wm_pio_s1_write),                              //                         .write
		.av_read                (wm_pio_s1_read),                               //                         .read
		.av_readdata            (wm_pio_s1_readdata),                           //                         .readdata
		.av_writedata           (wm_pio_s1_writedata),                          //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                     //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (timer_0_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                             //                         .write
		.av_readdata            (timer_0_s1_readdata),                          //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                         //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),            //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                    //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                 //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),               //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),               //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                    //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mb_slv_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mb_slv_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (mb_slv_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (mb_slv_agent_m0_read),                         //                         .read
		.uav_write              (mb_slv_agent_m0_write),                        //                         .write
		.uav_waitrequest        (mb_slv_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (mb_slv_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (mb_slv_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (mb_slv_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (mb_slv_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (mb_slv_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (mb_slv_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (mb_slv_address),                               //      avalon_anti_slave_0.address
		.av_write               (mb_slv_write),                                 //                         .write
		.av_read                (mb_slv_read),                                  //                         .read
		.av_readdata            (mb_slv_readdata),                              //                         .readdata
		.av_writedata           (mb_slv_writedata),                             //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s2_translator (
		.clk                    (clk_clk_clk),                                  //                      clk.clk
		.reset                  (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s2_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s2_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (onchip_memory2_0_s2_agent_m0_read),            //                         .read
		.uav_write              (onchip_memory2_0_s2_agent_m0_write),           //                         .write
		.uav_waitrequest        (onchip_memory2_0_s2_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s2_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s2_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s2_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (onchip_memory2_0_s2_agent_m0_writedata),       //                         .writedata
		.uav_lock               (onchip_memory2_0_s2_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s2_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (onchip_memory2_0_s2_address),                  //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s2_write),                    //                         .write
		.av_readdata            (onchip_memory2_0_s2_readdata),                 //                         .readdata
		.av_writedata           (onchip_memory2_0_s2_writedata),                //                         .writedata
		.av_byteenable          (onchip_memory2_0_s2_byteenable),               //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s2_chipselect),               //                         .chipselect
		.av_clken               (onchip_memory2_0_s2_clken),                    //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (111),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (24),
		.AV_BURSTCOUNT_W           (7),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) neopixel_0_data_agent (
		.clk                   (clk_clk_clk),                                                        //       clk.clk
		.reset                 (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.av_address            (neopixel_0_data_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (neopixel_0_data_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (neopixel_0_data_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (neopixel_0_data_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (neopixel_0_data_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (neopixel_0_data_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (neopixel_0_data_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (neopixel_0_data_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (neopixel_0_data_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (neopixel_0_data_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (neopixel_0_data_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (neopixel_0_data_agent_cp_valid),                                     //        cp.valid
		.cp_data               (neopixel_0_data_agent_cp_data),                                      //          .data
		.cp_startofpacket      (neopixel_0_data_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (neopixel_0_data_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (neopixel_0_data_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                  //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                   //          .data
		.rp_channel            (rsp_mux_src_channel),                                                //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                  //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (111),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (24),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_clk_clk),                                                                 //       clk.clk
		.reset                 (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (118),
		.PKT_CACHE_L               (115),
		.PKT_THREAD_ID_H           (111),
		.PKT_THREAD_ID_L           (111),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (24),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_clk_clk),                                                                        //       clk.clk
		.reset                 (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sam_pwm_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                             //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (sam_pwm_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sam_pwm_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sam_pwm_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sam_pwm_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sam_pwm_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sam_pwm_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sam_pwm_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sam_pwm_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sam_pwm_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sam_pwm_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sam_pwm_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sam_pwm_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sam_pwm_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sam_pwm_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sam_pwm_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sam_pwm_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                 //                .channel
		.rf_sink_ready           (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sam_pwm_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sam_pwm_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sam_pwm_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sam_pwm_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sam_pwm_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sam_pwm_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sam_pwm_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sam_pwm_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sam_pwm_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                             //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (sam_pwm_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sam_pwm_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sam_pwm_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sam_pwm_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sam_pwm_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sam_pwm_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_encoder_0_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                                    //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (quad_encoder_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (quad_encoder_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (quad_encoder_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (quad_encoder_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (quad_encoder_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (quad_encoder_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (quad_encoder_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (quad_encoder_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (quad_encoder_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (quad_encoder_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (quad_encoder_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (quad_encoder_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (quad_encoder_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (quad_encoder_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (quad_encoder_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (quad_encoder_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (quad_encoder_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (quad_encoder_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (quad_encoder_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (quad_encoder_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (quad_encoder_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_encoder_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                    //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (quad_encoder_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (quad_encoder_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (quad_encoder_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (quad_encoder_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (quad_encoder_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (quad_encoder_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_0_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (i2c_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                               //                .channel
		.rf_sink_ready           (i2c_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (i2c_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (i2c_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_1_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (i2c_1_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_1_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_1_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_1_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_1_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_1_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_1_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_1_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_1_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_1_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_1_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_1_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_1_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_1_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_1_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_1_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                               //                .channel
		.rf_sink_ready           (i2c_1_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_1_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_1_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_1_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_1_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_1_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_1_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_1_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (i2c_1_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_1_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_1_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_1_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (i2c_1_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_1_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_1_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_1_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_1_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_1_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_1_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_1_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_3_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (i2c_3_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_3_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_3_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_3_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_3_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_3_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_3_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_3_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_3_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_3_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_3_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_3_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_3_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_3_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_3_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_3_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                               //                .channel
		.rf_sink_ready           (i2c_3_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_3_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_3_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_3_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_3_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_3_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_3_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_3_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_3_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_3_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (i2c_3_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_3_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_3_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_3_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (i2c_3_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_3_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_3_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_3_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_3_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_3_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_3_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_3_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_3_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_3_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_2_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (i2c_2_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_2_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_2_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_2_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_2_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_2_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_2_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_2_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_2_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_2_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_2_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_2_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_2_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_2_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_2_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_2_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                               //                .channel
		.rf_sink_ready           (i2c_2_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_2_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_2_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_2_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_2_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_2_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_2_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_2_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_2_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_2_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (i2c_2_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_2_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_2_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_2_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (i2c_2_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_2_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_2_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_2_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_2_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_2_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_2_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_2_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_2_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_2_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) qspi_avl_csr_agent (
		.clk                     (flash_clk_clk_clk),                             //             clk.clk
		.reset                   (qspi_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (qspi_avl_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (qspi_avl_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (qspi_avl_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (qspi_avl_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (qspi_avl_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (qspi_avl_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (qspi_avl_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (qspi_avl_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (qspi_avl_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (qspi_avl_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (qspi_avl_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (qspi_avl_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (qspi_avl_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (qspi_avl_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (qspi_avl_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (qspi_avl_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                       //                .channel
		.rf_sink_ready           (qspi_avl_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (qspi_avl_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (qspi_avl_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (qspi_avl_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (qspi_avl_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (qspi_avl_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (qspi_avl_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (qspi_avl_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (qspi_avl_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (qspi_avl_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),             //                .error
		.rdata_fifo_src_ready    (qspi_avl_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (qspi_avl_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (qspi_avl_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) qspi_avl_csr_agent_rsp_fifo (
		.clk               (flash_clk_clk_clk),                             //       clk.clk
		.reset             (qspi_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (qspi_avl_csr_agent_rf_source_data),             //        in.data
		.in_valid          (qspi_avl_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (qspi_avl_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (qspi_avl_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (qspi_avl_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (qspi_avl_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (qspi_avl_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (qspi_avl_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (qspi_avl_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (qspi_avl_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) qspi_avl_csr_agent_rdata_fifo (
		.clk               (flash_clk_clk_clk),                       //       clk.clk
		.reset             (qspi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (qspi_avl_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (qspi_avl_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (qspi_avl_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (qspi_avl_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (qspi_avl_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (qspi_avl_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) qspi_avl_mem_agent (
		.clk                     (flash_clk_clk_clk),                                //             clk.clk
		.reset                   (qspi_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (qspi_avl_mem_agent_m0_address),                    //              m0.address
		.m0_burstcount           (qspi_avl_mem_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (qspi_avl_mem_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (qspi_avl_mem_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (qspi_avl_mem_agent_m0_lock),                       //                .lock
		.m0_readdata             (qspi_avl_mem_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (qspi_avl_mem_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (qspi_avl_mem_agent_m0_read),                       //                .read
		.m0_waitrequest          (qspi_avl_mem_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (qspi_avl_mem_agent_m0_writedata),                  //                .writedata
		.m0_write                (qspi_avl_mem_agent_m0_write),                      //                .write
		.rp_endofpacket          (qspi_avl_mem_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (qspi_avl_mem_agent_rp_ready),                      //                .ready
		.rp_valid                (qspi_avl_mem_agent_rp_valid),                      //                .valid
		.rp_data                 (qspi_avl_mem_agent_rp_data),                       //                .data
		.rp_startofpacket        (qspi_avl_mem_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (qspi_avl_mem_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (qspi_avl_mem_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (qspi_avl_mem_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (qspi_avl_mem_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (qspi_avl_mem_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (qspi_avl_mem_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (qspi_avl_mem_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (qspi_avl_mem_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (qspi_avl_mem_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (qspi_avl_mem_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (qspi_avl_mem_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (qspi_avl_mem_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (qspi_avl_mem_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (qspi_avl_mem_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (qspi_avl_mem_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (qspi_avl_mem_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                //                .error
		.rdata_fifo_src_ready    (qspi_avl_mem_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (qspi_avl_mem_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (qspi_avl_mem_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) qspi_avl_mem_agent_rsp_fifo (
		.clk               (flash_clk_clk_clk),                             //       clk.clk
		.reset             (qspi_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (qspi_avl_mem_agent_rf_source_data),             //        in.data
		.in_valid          (qspi_avl_mem_agent_rf_source_valid),            //          .valid
		.in_ready          (qspi_avl_mem_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (qspi_avl_mem_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (qspi_avl_mem_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (qspi_avl_mem_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (qspi_avl_mem_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (qspi_avl_mem_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (qspi_avl_mem_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (qspi_avl_mem_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (32),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) qspi_avl_mem_agent_rdata_fifo (
		.clk               (flash_clk_clk_clk),                       //       clk.clk
		.reset             (qspi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (qspi_avl_mem_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (qspi_avl_mem_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (qspi_avl_mem_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (qspi_avl_mem_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (qspi_avl_mem_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (qspi_avl_mem_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) neopixel_0_csr_agent (
		.clk                     (clk_clk_clk),                                     //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (neopixel_0_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (neopixel_0_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (neopixel_0_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (neopixel_0_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (neopixel_0_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (neopixel_0_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (neopixel_0_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (neopixel_0_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (neopixel_0_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (neopixel_0_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (neopixel_0_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (neopixel_0_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (neopixel_0_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (neopixel_0_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (neopixel_0_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (neopixel_0_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                         //                .channel
		.rf_sink_ready           (neopixel_0_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (neopixel_0_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (neopixel_0_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (neopixel_0_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (neopixel_0_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (neopixel_0_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (neopixel_0_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (neopixel_0_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (neopixel_0_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (neopixel_0_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),               //                .error
		.rdata_fifo_src_ready    (neopixel_0_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (neopixel_0_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (neopixel_0_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) neopixel_0_csr_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                     //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (neopixel_0_csr_agent_rf_source_data),             //        in.data
		.in_valid          (neopixel_0_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (neopixel_0_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (neopixel_0_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (neopixel_0_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (neopixel_0_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (neopixel_0_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (neopixel_0_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (neopixel_0_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (neopixel_0_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tspi_0_d_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tspi_0_d_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tspi_0_d_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tspi_0_d_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tspi_0_d_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tspi_0_d_agent_m0_lock),                       //                .lock
		.m0_readdata             (tspi_0_d_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tspi_0_d_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tspi_0_d_agent_m0_read),                       //                .read
		.m0_waitrequest          (tspi_0_d_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tspi_0_d_agent_m0_writedata),                  //                .writedata
		.m0_write                (tspi_0_d_agent_m0_write),                      //                .write
		.rp_endofpacket          (tspi_0_d_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tspi_0_d_agent_rp_ready),                      //                .ready
		.rp_valid                (tspi_0_d_agent_rp_valid),                      //                .valid
		.rp_data                 (tspi_0_d_agent_rp_data),                       //                .data
		.rp_startofpacket        (tspi_0_d_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_010_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                      //                .channel
		.rf_sink_ready           (tspi_0_d_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tspi_0_d_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tspi_0_d_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tspi_0_d_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tspi_0_d_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tspi_0_d_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tspi_0_d_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tspi_0_d_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tspi_0_d_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tspi_0_d_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),            //                .error
		.rdata_fifo_src_ready    (tspi_0_d_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tspi_0_d_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tspi_0_d_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tspi_0_d_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tspi_0_d_agent_rf_source_data),                //        in.data
		.in_valid          (tspi_0_d_agent_rf_source_valid),               //          .valid
		.in_ready          (tspi_0_d_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (tspi_0_d_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (tspi_0_d_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (tspi_0_d_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (tspi_0_d_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (tspi_0_d_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (tspi_0_d_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (tspi_0_d_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tspi_1_d_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tspi_1_d_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tspi_1_d_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tspi_1_d_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tspi_1_d_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tspi_1_d_agent_m0_lock),                       //                .lock
		.m0_readdata             (tspi_1_d_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tspi_1_d_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tspi_1_d_agent_m0_read),                       //                .read
		.m0_waitrequest          (tspi_1_d_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tspi_1_d_agent_m0_writedata),                  //                .writedata
		.m0_write                (tspi_1_d_agent_m0_write),                      //                .write
		.rp_endofpacket          (tspi_1_d_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tspi_1_d_agent_rp_ready),                      //                .ready
		.rp_valid                (tspi_1_d_agent_rp_valid),                      //                .valid
		.rp_data                 (tspi_1_d_agent_rp_data),                       //                .data
		.rp_startofpacket        (tspi_1_d_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_011_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                      //                .channel
		.rf_sink_ready           (tspi_1_d_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tspi_1_d_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tspi_1_d_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tspi_1_d_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tspi_1_d_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tspi_1_d_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tspi_1_d_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tspi_1_d_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tspi_1_d_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tspi_1_d_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),            //                .error
		.rdata_fifo_src_ready    (tspi_1_d_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tspi_1_d_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tspi_1_d_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tspi_1_d_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tspi_1_d_agent_rf_source_data),                //        in.data
		.in_valid          (tspi_1_d_agent_rf_source_valid),               //          .valid
		.in_ready          (tspi_1_d_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (tspi_1_d_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (tspi_1_d_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (tspi_1_d_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (tspi_1_d_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (tspi_1_d_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (tspi_1_d_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (tspi_1_d_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tspi_2_d_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tspi_2_d_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tspi_2_d_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tspi_2_d_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tspi_2_d_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tspi_2_d_agent_m0_lock),                       //                .lock
		.m0_readdata             (tspi_2_d_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tspi_2_d_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tspi_2_d_agent_m0_read),                       //                .read
		.m0_waitrequest          (tspi_2_d_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tspi_2_d_agent_m0_writedata),                  //                .writedata
		.m0_write                (tspi_2_d_agent_m0_write),                      //                .write
		.rp_endofpacket          (tspi_2_d_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tspi_2_d_agent_rp_ready),                      //                .ready
		.rp_valid                (tspi_2_d_agent_rp_valid),                      //                .valid
		.rp_data                 (tspi_2_d_agent_rp_data),                       //                .data
		.rp_startofpacket        (tspi_2_d_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_012_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                      //                .channel
		.rf_sink_ready           (tspi_2_d_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tspi_2_d_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tspi_2_d_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tspi_2_d_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tspi_2_d_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tspi_2_d_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tspi_2_d_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tspi_2_d_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tspi_2_d_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tspi_2_d_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),            //                .error
		.rdata_fifo_src_ready    (tspi_2_d_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tspi_2_d_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tspi_2_d_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tspi_2_d_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tspi_2_d_agent_rf_source_data),                //        in.data
		.in_valid          (tspi_2_d_agent_rf_source_valid),               //          .valid
		.in_ready          (tspi_2_d_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (tspi_2_d_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (tspi_2_d_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (tspi_2_d_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (tspi_2_d_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (tspi_2_d_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (tspi_2_d_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (tspi_2_d_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tspi_3_d_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tspi_3_d_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tspi_3_d_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tspi_3_d_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tspi_3_d_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tspi_3_d_agent_m0_lock),                       //                .lock
		.m0_readdata             (tspi_3_d_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tspi_3_d_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tspi_3_d_agent_m0_read),                       //                .read
		.m0_waitrequest          (tspi_3_d_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tspi_3_d_agent_m0_writedata),                  //                .writedata
		.m0_write                (tspi_3_d_agent_m0_write),                      //                .write
		.rp_endofpacket          (tspi_3_d_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tspi_3_d_agent_rp_ready),                      //                .ready
		.rp_valid                (tspi_3_d_agent_rp_valid),                      //                .valid
		.rp_data                 (tspi_3_d_agent_rp_data),                       //                .data
		.rp_startofpacket        (tspi_3_d_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_013_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                      //                .channel
		.rf_sink_ready           (tspi_3_d_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tspi_3_d_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tspi_3_d_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tspi_3_d_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tspi_3_d_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tspi_3_d_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tspi_3_d_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tspi_3_d_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tspi_3_d_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tspi_3_d_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),            //                .error
		.rdata_fifo_src_ready    (tspi_3_d_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tspi_3_d_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tspi_3_d_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tspi_3_d_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tspi_3_d_agent_rf_source_data),                //        in.data
		.in_valid          (tspi_3_d_agent_rf_source_valid),               //          .valid
		.in_ready          (tspi_3_d_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (tspi_3_d_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (tspi_3_d_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (tspi_3_d_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (tspi_3_d_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (tspi_3_d_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (tspi_3_d_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (tspi_3_d_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tspi_4_d_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tspi_4_d_agent_m0_address),                    //              m0.address
		.m0_burstcount           (tspi_4_d_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (tspi_4_d_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (tspi_4_d_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (tspi_4_d_agent_m0_lock),                       //                .lock
		.m0_readdata             (tspi_4_d_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (tspi_4_d_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (tspi_4_d_agent_m0_read),                       //                .read
		.m0_waitrequest          (tspi_4_d_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (tspi_4_d_agent_m0_writedata),                  //                .writedata
		.m0_write                (tspi_4_d_agent_m0_write),                      //                .write
		.rp_endofpacket          (tspi_4_d_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (tspi_4_d_agent_rp_ready),                      //                .ready
		.rp_valid                (tspi_4_d_agent_rp_valid),                      //                .valid
		.rp_data                 (tspi_4_d_agent_rp_data),                       //                .data
		.rp_startofpacket        (tspi_4_d_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_014_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                      //                .channel
		.rf_sink_ready           (tspi_4_d_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (tspi_4_d_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (tspi_4_d_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (tspi_4_d_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (tspi_4_d_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (tspi_4_d_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (tspi_4_d_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (tspi_4_d_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (tspi_4_d_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (tspi_4_d_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),            //                .error
		.rdata_fifo_src_ready    (tspi_4_d_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tspi_4_d_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (tspi_4_d_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tspi_4_d_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tspi_4_d_agent_rf_source_data),                //        in.data
		.in_valid          (tspi_4_d_agent_rf_source_valid),               //          .valid
		.in_ready          (tspi_4_d_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (tspi_4_d_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (tspi_4_d_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (tspi_4_d_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (tspi_4_d_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (tspi_4_d_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (tspi_4_d_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (tspi_4_d_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flash_spi_d_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (flash_spi_d_agent_m0_address),                 //              m0.address
		.m0_burstcount           (flash_spi_d_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (flash_spi_d_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (flash_spi_d_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (flash_spi_d_agent_m0_lock),                    //                .lock
		.m0_readdata             (flash_spi_d_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (flash_spi_d_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (flash_spi_d_agent_m0_read),                    //                .read
		.m0_waitrequest          (flash_spi_d_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (flash_spi_d_agent_m0_writedata),               //                .writedata
		.m0_write                (flash_spi_d_agent_m0_write),                   //                .write
		.rp_endofpacket          (flash_spi_d_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (flash_spi_d_agent_rp_ready),                   //                .ready
		.rp_valid                (flash_spi_d_agent_rp_valid),                   //                .valid
		.rp_data                 (flash_spi_d_agent_rp_data),                    //                .data
		.rp_startofpacket        (flash_spi_d_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_015_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                      //                .channel
		.rf_sink_ready           (flash_spi_d_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (flash_spi_d_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (flash_spi_d_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (flash_spi_d_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (flash_spi_d_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (flash_spi_d_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (flash_spi_d_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (flash_spi_d_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (flash_spi_d_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (flash_spi_d_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),            //                .error
		.rdata_fifo_src_ready    (flash_spi_d_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_spi_d_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (flash_spi_d_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flash_spi_d_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (flash_spi_d_agent_rf_source_data),             //        in.data
		.in_valid          (flash_spi_d_agent_rf_source_valid),            //          .valid
		.in_ready          (flash_spi_d_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (flash_spi_d_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (flash_spi_d_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (flash_spi_d_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (flash_spi_d_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (flash_spi_d_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (flash_spi_d_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (flash_spi_d_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nina_spi_d_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (nina_spi_d_agent_m0_address),                  //              m0.address
		.m0_burstcount           (nina_spi_d_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (nina_spi_d_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (nina_spi_d_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (nina_spi_d_agent_m0_lock),                     //                .lock
		.m0_readdata             (nina_spi_d_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (nina_spi_d_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (nina_spi_d_agent_m0_read),                     //                .read
		.m0_waitrequest          (nina_spi_d_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (nina_spi_d_agent_m0_writedata),                //                .writedata
		.m0_write                (nina_spi_d_agent_m0_write),                    //                .write
		.rp_endofpacket          (nina_spi_d_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (nina_spi_d_agent_rp_ready),                    //                .ready
		.rp_valid                (nina_spi_d_agent_rp_valid),                    //                .valid
		.rp_data                 (nina_spi_d_agent_rp_data),                     //                .data
		.rp_startofpacket        (nina_spi_d_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_016_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                      //                .channel
		.rf_sink_ready           (nina_spi_d_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (nina_spi_d_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (nina_spi_d_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (nina_spi_d_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (nina_spi_d_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (nina_spi_d_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (nina_spi_d_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (nina_spi_d_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (nina_spi_d_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (nina_spi_d_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),            //                .error
		.rdata_fifo_src_ready    (nina_spi_d_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nina_spi_d_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (nina_spi_d_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nina_spi_d_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nina_spi_d_agent_rf_source_data),              //        in.data
		.in_valid          (nina_spi_d_agent_rf_source_valid),             //          .valid
		.in_ready          (nina_spi_d_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (nina_spi_d_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (nina_spi_d_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (nina_spi_d_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (nina_spi_d_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (nina_spi_d_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (nina_spi_d_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (nina_spi_d_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sam_pio_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sam_pio_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (sam_pio_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (sam_pio_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (sam_pio_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (sam_pio_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (sam_pio_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (sam_pio_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (sam_pio_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (sam_pio_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (sam_pio_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (sam_pio_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (sam_pio_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (sam_pio_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (sam_pio_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (sam_pio_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (sam_pio_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_017_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                      //                .channel
		.rf_sink_ready           (sam_pio_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (sam_pio_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (sam_pio_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (sam_pio_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (sam_pio_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (sam_pio_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (sam_pio_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (sam_pio_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (sam_pio_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (sam_pio_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),            //                .error
		.rdata_fifo_src_ready    (sam_pio_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sam_pio_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (sam_pio_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sam_pio_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sam_pio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (sam_pio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (sam_pio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sam_pio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sam_pio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sam_pio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sam_pio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sam_pio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sam_pio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sam_pio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pex_pio_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pex_pio_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (pex_pio_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (pex_pio_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (pex_pio_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (pex_pio_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (pex_pio_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (pex_pio_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (pex_pio_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (pex_pio_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (pex_pio_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (pex_pio_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (pex_pio_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (pex_pio_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (pex_pio_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (pex_pio_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (pex_pio_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_018_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                      //                .channel
		.rf_sink_ready           (pex_pio_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (pex_pio_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (pex_pio_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (pex_pio_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (pex_pio_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (pex_pio_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (pex_pio_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (pex_pio_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (pex_pio_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (pex_pio_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),            //                .error
		.rdata_fifo_src_ready    (pex_pio_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pex_pio_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (pex_pio_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pex_pio_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pex_pio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (pex_pio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (pex_pio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (pex_pio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (pex_pio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (pex_pio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (pex_pio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (pex_pio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (pex_pio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (pex_pio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) wm_pio_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (wm_pio_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (wm_pio_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (wm_pio_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (wm_pio_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (wm_pio_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (wm_pio_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (wm_pio_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (wm_pio_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (wm_pio_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (wm_pio_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (wm_pio_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (wm_pio_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (wm_pio_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (wm_pio_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (wm_pio_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (wm_pio_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_019_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                      //                .channel
		.rf_sink_ready           (wm_pio_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (wm_pio_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (wm_pio_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (wm_pio_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (wm_pio_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (wm_pio_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (wm_pio_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (wm_pio_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (wm_pio_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (wm_pio_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),            //                .error
		.rdata_fifo_src_ready    (wm_pio_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (wm_pio_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (wm_pio_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) wm_pio_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (wm_pio_s1_agent_rf_source_data),               //        in.data
		.in_valid          (wm_pio_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (wm_pio_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (wm_pio_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (wm_pio_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (wm_pio_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (wm_pio_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (wm_pio_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (wm_pio_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (wm_pio_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_020_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                      //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),            //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),              //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_clk_clk),                                          //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                          //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mb_slv_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mb_slv_agent_m0_address),                      //              m0.address
		.m0_burstcount           (mb_slv_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (mb_slv_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (mb_slv_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (mb_slv_agent_m0_lock),                         //                .lock
		.m0_readdata             (mb_slv_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (mb_slv_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (mb_slv_agent_m0_read),                         //                .read
		.m0_waitrequest          (mb_slv_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (mb_slv_agent_m0_writedata),                    //                .writedata
		.m0_write                (mb_slv_agent_m0_write),                        //                .write
		.rp_endofpacket          (mb_slv_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (mb_slv_agent_rp_ready),                        //                .ready
		.rp_valid                (mb_slv_agent_rp_valid),                        //                .valid
		.rp_data                 (mb_slv_agent_rp_data),                         //                .data
		.rp_startofpacket        (mb_slv_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_022_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                      //                .channel
		.rf_sink_ready           (mb_slv_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (mb_slv_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (mb_slv_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (mb_slv_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (mb_slv_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (mb_slv_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (mb_slv_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (mb_slv_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (mb_slv_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (mb_slv_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),            //                .error
		.rdata_fifo_src_ready    (mb_slv_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mb_slv_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (mb_slv_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mb_slv_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mb_slv_agent_rf_source_data),                  //        in.data
		.in_valid          (mb_slv_agent_rf_source_valid),                 //          .valid
		.in_ready          (mb_slv_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (mb_slv_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (mb_slv_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (mb_slv_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (mb_slv_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (mb_slv_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (mb_slv_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (mb_slv_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (123),
		.PKT_ORI_BURST_SIZE_L      (121),
		.PKT_RESPONSE_STATUS_H     (120),
		.PKT_RESPONSE_STATUS_L     (119),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (114),
		.PKT_PROTECTION_L          (112),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s2_agent (
		.clk                     (clk_clk_clk),                                          //             clk.clk
		.reset                   (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_023_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s2_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                          //       clk.clk
		.reset             (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (onchip_memory2_0_s2_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router router (
		.sink_ready         (neopixel_0_data_agent_cp_ready),               //      sink.ready
		.sink_valid         (neopixel_0_data_agent_cp_valid),               //          .valid
		.sink_data          (neopixel_0_data_agent_cp_data),                //          .data
		.sink_startofpacket (neopixel_0_data_agent_cp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (neopixel_0_data_agent_cp_endofpacket),         //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                     //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_001_src_ready),                            //       src.ready
		.src_valid          (router_001_src_valid),                            //          .valid
		.src_data           (router_001_src_data),                             //          .data
		.src_channel        (router_001_src_channel),                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                       //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                            //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_002_src_ready),                                   //       src.ready
		.src_valid          (router_002_src_valid),                                   //          .valid
		.src_data           (router_002_src_data),                                    //          .data
		.src_channel        (router_002_src_channel),                                 //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                              //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (sdram_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                      //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (sam_pwm_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sam_pwm_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sam_pwm_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sam_pwm_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sam_pwm_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                   //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_005 (
		.sink_ready         (quad_encoder_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (quad_encoder_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (quad_encoder_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (quad_encoder_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (quad_encoder_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                          //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_005_src_ready),                                 //       src.ready
		.src_valid          (router_005_src_valid),                                 //          .valid
		.src_data           (router_005_src_data),                                  //          .data
		.src_channel        (router_005_src_channel),                               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                            //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_006 (
		.sink_ready         (i2c_0_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (i2c_0_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (i2c_0_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (i2c_0_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (i2c_0_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                         //       src.ready
		.src_valid          (router_006_src_valid),                         //          .valid
		.src_data           (router_006_src_data),                          //          .data
		.src_channel        (router_006_src_channel),                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_007 (
		.sink_ready         (i2c_1_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (i2c_1_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (i2c_1_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (i2c_1_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (i2c_1_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_008 (
		.sink_ready         (i2c_3_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (i2c_3_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (i2c_3_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (i2c_3_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (i2c_3_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                         //       src.ready
		.src_valid          (router_008_src_valid),                         //          .valid
		.src_data           (router_008_src_data),                          //          .data
		.src_channel        (router_008_src_channel),                       //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_009 (
		.sink_ready         (i2c_2_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (i2c_2_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (i2c_2_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (i2c_2_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (i2c_2_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                         //       src.ready
		.src_valid          (router_009_src_valid),                         //          .valid
		.src_data           (router_009_src_data),                          //          .data
		.src_channel        (router_009_src_channel),                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_010 (
		.sink_ready         (qspi_avl_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (qspi_avl_csr_agent_rp_valid),            //          .valid
		.sink_data          (qspi_avl_csr_agent_rp_data),             //          .data
		.sink_startofpacket (qspi_avl_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (qspi_avl_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (flash_clk_clk_clk),                      //       clk.clk
		.reset              (qspi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                   //       src.ready
		.src_valid          (router_010_src_valid),                   //          .valid
		.src_data           (router_010_src_data),                    //          .data
		.src_channel        (router_010_src_channel),                 //          .channel
		.src_startofpacket  (router_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)              //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_011 router_011 (
		.sink_ready         (qspi_avl_mem_agent_rp_ready),            //      sink.ready
		.sink_valid         (qspi_avl_mem_agent_rp_valid),            //          .valid
		.sink_data          (qspi_avl_mem_agent_rp_data),             //          .data
		.sink_startofpacket (qspi_avl_mem_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (qspi_avl_mem_agent_rp_endofpacket),      //          .endofpacket
		.clk                (flash_clk_clk_clk),                      //       clk.clk
		.reset              (qspi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                   //       src.ready
		.src_valid          (router_011_src_valid),                   //          .valid
		.src_data           (router_011_src_data),                    //          .data
		.src_channel        (router_011_src_channel),                 //          .channel
		.src_startofpacket  (router_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)              //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_012 (
		.sink_ready         (neopixel_0_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (neopixel_0_csr_agent_rp_valid),                //          .valid
		.sink_data          (neopixel_0_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (neopixel_0_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (neopixel_0_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                         //       src.ready
		.src_valid          (router_012_src_valid),                         //          .valid
		.src_data           (router_012_src_data),                          //          .data
		.src_channel        (router_012_src_channel),                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_013 (
		.sink_ready         (tspi_0_d_agent_rp_ready),                      //      sink.ready
		.sink_valid         (tspi_0_d_agent_rp_valid),                      //          .valid
		.sink_data          (tspi_0_d_agent_rp_data),                       //          .data
		.sink_startofpacket (tspi_0_d_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (tspi_0_d_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                         //       src.ready
		.src_valid          (router_013_src_valid),                         //          .valid
		.src_data           (router_013_src_data),                          //          .data
		.src_channel        (router_013_src_channel),                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_014 (
		.sink_ready         (tspi_1_d_agent_rp_ready),                      //      sink.ready
		.sink_valid         (tspi_1_d_agent_rp_valid),                      //          .valid
		.sink_data          (tspi_1_d_agent_rp_data),                       //          .data
		.sink_startofpacket (tspi_1_d_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (tspi_1_d_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                         //       src.ready
		.src_valid          (router_014_src_valid),                         //          .valid
		.src_data           (router_014_src_data),                          //          .data
		.src_channel        (router_014_src_channel),                       //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_015 (
		.sink_ready         (tspi_2_d_agent_rp_ready),                      //      sink.ready
		.sink_valid         (tspi_2_d_agent_rp_valid),                      //          .valid
		.sink_data          (tspi_2_d_agent_rp_data),                       //          .data
		.sink_startofpacket (tspi_2_d_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (tspi_2_d_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                         //       src.ready
		.src_valid          (router_015_src_valid),                         //          .valid
		.src_data           (router_015_src_data),                          //          .data
		.src_channel        (router_015_src_channel),                       //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_016 (
		.sink_ready         (tspi_3_d_agent_rp_ready),                      //      sink.ready
		.sink_valid         (tspi_3_d_agent_rp_valid),                      //          .valid
		.sink_data          (tspi_3_d_agent_rp_data),                       //          .data
		.sink_startofpacket (tspi_3_d_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (tspi_3_d_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                         //       src.ready
		.src_valid          (router_016_src_valid),                         //          .valid
		.src_data           (router_016_src_data),                          //          .data
		.src_channel        (router_016_src_channel),                       //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_017 (
		.sink_ready         (tspi_4_d_agent_rp_ready),                      //      sink.ready
		.sink_valid         (tspi_4_d_agent_rp_valid),                      //          .valid
		.sink_data          (tspi_4_d_agent_rp_data),                       //          .data
		.sink_startofpacket (tspi_4_d_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (tspi_4_d_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                         //       src.ready
		.src_valid          (router_017_src_valid),                         //          .valid
		.src_data           (router_017_src_data),                          //          .data
		.src_channel        (router_017_src_channel),                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_018 (
		.sink_ready         (flash_spi_d_agent_rp_ready),                   //      sink.ready
		.sink_valid         (flash_spi_d_agent_rp_valid),                   //          .valid
		.sink_data          (flash_spi_d_agent_rp_data),                    //          .data
		.sink_startofpacket (flash_spi_d_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (flash_spi_d_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                         //       src.ready
		.src_valid          (router_018_src_valid),                         //          .valid
		.src_data           (router_018_src_data),                          //          .data
		.src_channel        (router_018_src_channel),                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_019 (
		.sink_ready         (nina_spi_d_agent_rp_ready),                    //      sink.ready
		.sink_valid         (nina_spi_d_agent_rp_valid),                    //          .valid
		.sink_data          (nina_spi_d_agent_rp_data),                     //          .data
		.sink_startofpacket (nina_spi_d_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (nina_spi_d_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                         //       src.ready
		.src_valid          (router_019_src_valid),                         //          .valid
		.src_data           (router_019_src_data),                          //          .data
		.src_channel        (router_019_src_channel),                       //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_020 (
		.sink_ready         (sam_pio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sam_pio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (sam_pio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (sam_pio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sam_pio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                         //       src.ready
		.src_valid          (router_020_src_valid),                         //          .valid
		.src_data           (router_020_src_data),                          //          .data
		.src_channel        (router_020_src_channel),                       //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_021 (
		.sink_ready         (pex_pio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (pex_pio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (pex_pio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (pex_pio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (pex_pio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                         //       src.ready
		.src_valid          (router_021_src_valid),                         //          .valid
		.src_data           (router_021_src_data),                          //          .data
		.src_channel        (router_021_src_channel),                       //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_022 (
		.sink_ready         (wm_pio_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (wm_pio_s1_agent_rp_valid),                     //          .valid
		.sink_data          (wm_pio_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (wm_pio_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (wm_pio_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                         //       src.ready
		.src_valid          (router_022_src_valid),                         //          .valid
		.src_data           (router_022_src_data),                          //          .data
		.src_channel        (router_022_src_channel),                       //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_023 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                    //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                         //       src.ready
		.src_valid          (router_023_src_valid),                         //          .valid
		.src_data           (router_023_src_data),                          //          .data
		.src_channel        (router_023_src_channel),                       //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_024 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),           //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),            //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                         //       src.ready
		.src_valid          (router_024_src_valid),                         //          .valid
		.src_data           (router_024_src_data),                          //          .data
		.src_channel        (router_024_src_channel),                       //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_004 router_025 (
		.sink_ready         (mb_slv_agent_rp_ready),                        //      sink.ready
		.sink_valid         (mb_slv_agent_rp_valid),                        //          .valid
		.sink_data          (mb_slv_agent_rp_data),                         //          .data
		.sink_startofpacket (mb_slv_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (mb_slv_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                         //       src.ready
		.src_valid          (router_025_src_valid),                         //          .valid
		.src_data           (router_025_src_data),                          //          .data
		.src_channel        (router_025_src_channel),                       //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_router_026 router_026 (
		.sink_ready         (onchip_memory2_0_s2_agent_rp_ready),           //      sink.ready
		.sink_valid         (onchip_memory2_0_s2_agent_rp_valid),           //          .valid
		.sink_data          (onchip_memory2_0_s2_agent_rp_data),            //          .data
		.sink_startofpacket (onchip_memory2_0_s2_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s2_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                         //       src.ready
		.src_valid          (router_026_src_valid),                         //          .valid
		.src_data           (router_026_src_data),                          //          .data
		.src_channel        (router_026_src_channel),                       //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_clk_clk),                                  //       cr0.clk
		.reset                 (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (82),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) qspi_avl_mem_burst_adapter (
		.clk                   (flash_clk_clk_clk),                                //       cr0.clk
		.reset                 (qspi_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                             //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                            //          .ready
		.source0_valid         (qspi_avl_mem_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (qspi_avl_mem_burst_adapter_source0_data),          //          .data
		.source0_channel       (qspi_avl_mem_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (qspi_avl_mem_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (qspi_avl_mem_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (qspi_avl_mem_burst_adapter_source0_ready)          //          .ready
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                             //      sink.ready
		.sink_channel       (router_src_channel),                           //          .channel
		.sink_data          (router_src_data),                              //          .data
		.sink_startofpacket (router_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_src0_data),                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                         //      sink.ready
		.sink_channel        (router_001_src_channel),                       //          .channel
		.sink_data           (router_001_src_data),                          //          .data
		.sink_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),                   //          .endofpacket
		.sink_valid          (router_001_src_valid),                         //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                     //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                     //          .valid
		.src0_data           (cmd_demux_001_src0_data),                      //          .data
		.src0_channel        (cmd_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),               //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                     //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                     //          .valid
		.src1_data           (cmd_demux_001_src1_data),                      //          .data
		.src1_channel        (cmd_demux_001_src1_channel),                   //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),               //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                     //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                     //          .valid
		.src2_data           (cmd_demux_001_src2_data),                      //          .data
		.src2_channel        (cmd_demux_001_src2_channel),                   //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),               //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                     //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                     //          .valid
		.src3_data           (cmd_demux_001_src3_data),                      //          .data
		.src3_channel        (cmd_demux_001_src3_channel),                   //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),               //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                     //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                     //          .valid
		.src4_data           (cmd_demux_001_src4_data),                      //          .data
		.src4_channel        (cmd_demux_001_src4_channel),                   //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),             //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),               //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                     //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                     //          .valid
		.src5_data           (cmd_demux_001_src5_data),                      //          .data
		.src5_channel        (cmd_demux_001_src5_channel),                   //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),             //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),               //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                     //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                     //          .valid
		.src6_data           (cmd_demux_001_src6_data),                      //          .data
		.src6_channel        (cmd_demux_001_src6_channel),                   //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),             //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),               //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                     //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                     //          .valid
		.src7_data           (cmd_demux_001_src7_data),                      //          .data
		.src7_channel        (cmd_demux_001_src7_channel),                   //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),             //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),               //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                     //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                     //          .valid
		.src8_data           (cmd_demux_001_src8_data),                      //          .data
		.src8_channel        (cmd_demux_001_src8_channel),                   //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),             //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),               //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                     //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                     //          .valid
		.src9_data           (cmd_demux_001_src9_data),                      //          .data
		.src9_channel        (cmd_demux_001_src9_channel),                   //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),             //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),               //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                    //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                    //          .valid
		.src10_data          (cmd_demux_001_src10_data),                     //          .data
		.src10_channel       (cmd_demux_001_src10_channel),                  //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),            //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),              //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                    //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                    //          .valid
		.src11_data          (cmd_demux_001_src11_data),                     //          .data
		.src11_channel       (cmd_demux_001_src11_channel),                  //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),            //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),              //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                    //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                    //          .valid
		.src12_data          (cmd_demux_001_src12_data),                     //          .data
		.src12_channel       (cmd_demux_001_src12_channel),                  //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),            //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),              //          .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                    //     src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                    //          .valid
		.src13_data          (cmd_demux_001_src13_data),                     //          .data
		.src13_channel       (cmd_demux_001_src13_channel),                  //          .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),            //          .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),              //          .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                    //     src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                    //          .valid
		.src14_data          (cmd_demux_001_src14_data),                     //          .data
		.src14_channel       (cmd_demux_001_src14_channel),                  //          .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),            //          .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),              //          .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                    //     src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                    //          .valid
		.src15_data          (cmd_demux_001_src15_data),                     //          .data
		.src15_channel       (cmd_demux_001_src15_channel),                  //          .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),            //          .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),              //          .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                    //     src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                    //          .valid
		.src16_data          (cmd_demux_001_src16_data),                     //          .data
		.src16_channel       (cmd_demux_001_src16_channel),                  //          .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),            //          .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),              //          .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                    //     src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                    //          .valid
		.src17_data          (cmd_demux_001_src17_data),                     //          .data
		.src17_channel       (cmd_demux_001_src17_channel),                  //          .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),            //          .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),              //          .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                    //     src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                    //          .valid
		.src18_data          (cmd_demux_001_src18_data),                     //          .data
		.src18_channel       (cmd_demux_001_src18_channel),                  //          .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),            //          .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),              //          .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                    //     src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                    //          .valid
		.src19_data          (cmd_demux_001_src19_data),                     //          .data
		.src19_channel       (cmd_demux_001_src19_channel),                  //          .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),            //          .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),              //          .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                    //     src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                    //          .valid
		.src20_data          (cmd_demux_001_src20_data),                     //          .data
		.src20_channel       (cmd_demux_001_src20_channel),                  //          .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),            //          .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),              //          .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                    //     src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                    //          .valid
		.src21_data          (cmd_demux_001_src21_data),                     //          .data
		.src21_channel       (cmd_demux_001_src21_channel),                  //          .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),            //          .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),              //          .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),                    //     src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),                    //          .valid
		.src22_data          (cmd_demux_001_src22_data),                     //          .data
		.src22_channel       (cmd_demux_001_src22_channel),                  //          .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),            //          .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_002_src0_data),                      //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),               //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                     //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                     //          .valid
		.src1_data          (cmd_demux_002_src1_data),                      //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                   //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_004 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //          .valid
		.src_data            (cmd_mux_004_src_data),                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //          .valid
		.src_data            (cmd_mux_005_src_data),                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                        //          .valid
		.src_data            (cmd_mux_006_src_data),                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_007 (
		.clk                 (flash_clk_clk_clk),                      //       clk.clk
		.reset               (qspi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                  //          .valid
		.src_data            (cmd_mux_007_src_data),                   //          .data
		.src_channel         (cmd_mux_007_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),            //          .endofpacket
		.sink0_ready         (crosser_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_out_valid),                      //          .valid
		.sink0_channel       (crosser_out_channel),                    //          .channel
		.sink0_data          (crosser_out_data),                       //          .data
		.sink0_startofpacket (crosser_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                 //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (flash_clk_clk_clk),                      //       clk.clk
		.reset               (qspi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                  //          .valid
		.src_data            (cmd_mux_008_src_data),                   //          .data
		.src_channel         (cmd_mux_008_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),            //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                  //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                  //          .valid
		.sink0_channel       (crosser_001_out_channel),                //          .channel
		.sink0_data          (crosser_001_out_data),                   //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),            //          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                  //     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                  //          .valid
		.sink1_channel       (crosser_002_out_channel),                //          .channel
		.sink1_data          (crosser_002_out_data),                   //          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)             //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_009 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_010 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                        //          .valid
		.src_data            (cmd_mux_010_src_data),                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_011 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                        //          .valid
		.src_data            (cmd_mux_011_src_data),                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_012 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                        //          .valid
		.src_data            (cmd_mux_012_src_data),                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_013 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                        //          .valid
		.src_data            (cmd_mux_013_src_data),                         //          .data
		.src_channel         (cmd_mux_013_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_014 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                        //          .valid
		.src_data            (cmd_mux_014_src_data),                         //          .data
		.src_channel         (cmd_mux_014_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_015 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                        //          .valid
		.src_data            (cmd_mux_015_src_data),                         //          .data
		.src_channel         (cmd_mux_015_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src15_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src15_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src15_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src15_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src15_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src15_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_016 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                        //          .valid
		.src_data            (cmd_mux_016_src_data),                         //          .data
		.src_channel         (cmd_mux_016_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src16_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src16_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src16_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src16_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src16_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src16_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_017 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                        //          .valid
		.src_data            (cmd_mux_017_src_data),                         //          .data
		.src_channel         (cmd_mux_017_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src17_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src17_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src17_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src17_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src17_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src17_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_018 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                        //          .valid
		.src_data            (cmd_mux_018_src_data),                         //          .data
		.src_channel         (cmd_mux_018_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src18_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src18_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src18_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src18_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src18_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src18_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_019 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                        //          .valid
		.src_data            (cmd_mux_019_src_data),                         //          .data
		.src_channel         (cmd_mux_019_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src19_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src19_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src19_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src19_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src19_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src19_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_020 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                        //          .valid
		.src_data            (cmd_mux_020_src_data),                         //          .data
		.src_channel         (cmd_mux_020_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src20_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src20_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src20_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src20_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src20_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src20_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_021 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                        //          .valid
		.src_data            (cmd_mux_021_src_data),                         //          .data
		.src_channel         (cmd_mux_021_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src21_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src21_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src21_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src21_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src21_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src21_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_022 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                        //          .valid
		.src_data            (cmd_mux_022_src_data),                         //          .data
		.src_channel         (cmd_mux_022_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src22_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_001_src22_valid),                    //          .valid
		.sink0_channel       (cmd_demux_001_src22_channel),                  //          .channel
		.sink0_data          (cmd_demux_001_src22_data),                     //          .data
		.sink0_startofpacket (cmd_demux_001_src22_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src22_endofpacket)               //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_mux_001 cmd_mux_023 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                        //          .valid
		.src_data            (cmd_mux_023_src_data),                         //          .data
		.src_channel         (cmd_mux_023_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                     //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                   //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                      //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux_002 rsp_demux (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_001 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //      sink.ready
		.sink_channel       (router_004_src_channel),                       //          .channel
		.sink_data          (router_004_src_data),                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_002 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_003 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                         //      sink.ready
		.sink_channel       (router_006_src_channel),                       //          .channel
		.sink_data          (router_006_src_data),                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_004 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                         //      sink.ready
		.sink_channel       (router_007_src_channel),                       //          .channel
		.sink_data          (router_007_src_data),                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_005 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                         //      sink.ready
		.sink_channel       (router_008_src_channel),                       //          .channel
		.sink_data          (router_008_src_data),                          //          .data
		.sink_startofpacket (router_008_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_008_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_006 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                         //      sink.ready
		.sink_channel       (router_009_src_channel),                       //          .channel
		.sink_data          (router_009_src_data),                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_rsp_demux_007 rsp_demux_007 (
		.clk                (flash_clk_clk_clk),                      //       clk.clk
		.reset              (qspi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                   //      sink.ready
		.sink_channel       (router_010_src_channel),                 //          .channel
		.sink_data          (router_010_src_data),                    //          .data
		.sink_startofpacket (router_010_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_010_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),               //          .valid
		.src0_data          (rsp_demux_007_src0_data),                //          .data
		.src0_channel       (rsp_demux_007_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)          //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_rsp_demux_008 rsp_demux_008 (
		.clk                (flash_clk_clk_clk),                      //       clk.clk
		.reset              (qspi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                   //      sink.ready
		.sink_channel       (router_011_src_channel),                 //          .channel
		.sink_data          (router_011_src_data),                    //          .data
		.sink_startofpacket (router_011_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_011_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),               //          .valid
		.src0_data          (rsp_demux_008_src0_data),                //          .data
		.src0_channel       (rsp_demux_008_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),               //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),               //          .valid
		.src1_data          (rsp_demux_008_src1_data),                //          .data
		.src1_channel       (rsp_demux_008_src1_channel),             //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)          //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_009 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                         //      sink.ready
		.sink_channel       (router_012_src_channel),                       //          .channel
		.sink_data          (router_012_src_data),                          //          .data
		.sink_startofpacket (router_012_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_012_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_010 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                         //      sink.ready
		.sink_channel       (router_013_src_channel),                       //          .channel
		.sink_data          (router_013_src_data),                          //          .data
		.sink_startofpacket (router_013_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_013_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_011 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                         //      sink.ready
		.sink_channel       (router_014_src_channel),                       //          .channel
		.sink_data          (router_014_src_data),                          //          .data
		.sink_startofpacket (router_014_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_014_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_012 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                         //      sink.ready
		.sink_channel       (router_015_src_channel),                       //          .channel
		.sink_data          (router_015_src_data),                          //          .data
		.sink_startofpacket (router_015_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_015_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_013 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                         //      sink.ready
		.sink_channel       (router_016_src_channel),                       //          .channel
		.sink_data          (router_016_src_data),                          //          .data
		.sink_startofpacket (router_016_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_016_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_013_src0_data),                      //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_014 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                         //      sink.ready
		.sink_channel       (router_017_src_channel),                       //          .channel
		.sink_data          (router_017_src_data),                          //          .data
		.sink_startofpacket (router_017_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_017_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_014_src0_data),                      //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_015 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                         //      sink.ready
		.sink_channel       (router_018_src_channel),                       //          .channel
		.sink_data          (router_018_src_data),                          //          .data
		.sink_startofpacket (router_018_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_018_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_015_src0_data),                      //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_016 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                         //      sink.ready
		.sink_channel       (router_019_src_channel),                       //          .channel
		.sink_data          (router_019_src_data),                          //          .data
		.sink_startofpacket (router_019_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_019_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_016_src0_data),                      //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_017 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                         //      sink.ready
		.sink_channel       (router_020_src_channel),                       //          .channel
		.sink_data          (router_020_src_data),                          //          .data
		.sink_startofpacket (router_020_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_020_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_017_src0_data),                      //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_018 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                         //      sink.ready
		.sink_channel       (router_021_src_channel),                       //          .channel
		.sink_data          (router_021_src_data),                          //          .data
		.sink_startofpacket (router_021_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_021_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_018_src0_data),                      //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_019 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                         //      sink.ready
		.sink_channel       (router_022_src_channel),                       //          .channel
		.sink_data          (router_022_src_data),                          //          .data
		.sink_startofpacket (router_022_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_022_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_019_src0_data),                      //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_020 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                         //      sink.ready
		.sink_channel       (router_023_src_channel),                       //          .channel
		.sink_data          (router_023_src_data),                          //          .data
		.sink_startofpacket (router_023_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_023_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_020_src0_data),                      //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_021 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                         //      sink.ready
		.sink_channel       (router_024_src_channel),                       //          .channel
		.sink_data          (router_024_src_data),                          //          .data
		.sink_startofpacket (router_024_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_024_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_021_src0_data),                      //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_022 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                         //      sink.ready
		.sink_channel       (router_025_src_channel),                       //          .channel
		.sink_data          (router_025_src_data),                          //          .data
		.sink_startofpacket (router_025_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_025_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_022_src0_data),                      //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_cmd_demux rsp_demux_023 (
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                         //      sink.ready
		.sink_channel       (router_026_src_channel),                       //          .channel
		.sink_data          (router_026_src_data),                          //          .data
		.sink_startofpacket (router_026_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_026_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_023_src0_data),                      //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                    //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_clk_clk),                                  //       clk.clk
		.reset                (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                        //          .valid
		.src_data             (rsp_mux_001_src_data),                         //          .data
		.src_channel          (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                         //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                         //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                       //          .channel
		.sink0_data           (rsp_demux_src1_data),                          //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                     //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                   //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                      //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                     //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                     //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                   //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                      //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                     //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                     //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                   //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                      //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),               //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                     //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                     //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                   //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                      //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                     //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                     //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                   //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                      //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                     //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                     //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                   //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                      //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.sink7_ready          (crosser_003_out_ready),                        //     sink7.ready
		.sink7_valid          (crosser_003_out_valid),                        //          .valid
		.sink7_channel        (crosser_003_out_channel),                      //          .channel
		.sink7_data           (crosser_003_out_data),                         //          .data
		.sink7_startofpacket  (crosser_003_out_startofpacket),                //          .startofpacket
		.sink7_endofpacket    (crosser_003_out_endofpacket),                  //          .endofpacket
		.sink8_ready          (crosser_004_out_ready),                        //     sink8.ready
		.sink8_valid          (crosser_004_out_valid),                        //          .valid
		.sink8_channel        (crosser_004_out_channel),                      //          .channel
		.sink8_data           (crosser_004_out_data),                         //          .data
		.sink8_startofpacket  (crosser_004_out_startofpacket),                //          .startofpacket
		.sink8_endofpacket    (crosser_004_out_endofpacket),                  //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                     //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                     //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                   //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                      //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                     //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                      //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                     //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                      //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),               //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                     //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                      //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),               //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                     //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                     //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                   //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                      //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),             //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),               //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                     //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                     //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                   //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                      //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),             //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),               //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                     //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                     //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                   //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                      //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),             //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),               //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                     //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                     //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                   //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                      //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),             //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),               //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                     //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                     //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                   //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                      //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),             //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),               //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                     //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                      //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),               //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                     //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                     //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                   //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                      //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),             //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),               //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                     //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                     //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                   //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                      //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),             //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),               //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                     //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                     //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                   //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                      //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),             //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),               //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                     //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                     //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                   //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                      //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),             //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket)                //          .endofpacket
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_clk_clk),                                  //       clk.clk
		.reset               (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                        //          .valid
		.src_data            (rsp_mux_002_src_data),                         //          .data
		.src_channel         (rsp_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                        //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                        //          .valid
		.sink0_channel       (crosser_005_out_channel),                      //          .channel
		.sink0_data          (crosser_005_out_data),                         //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket),                  //          .endofpacket
		.sink1_ready         (rsp_demux_023_src0_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_023_src0_valid),                     //          .valid
		.sink1_channel       (rsp_demux_023_src0_channel),                   //          .channel
		.sink1_data          (rsp_demux_023_src0_data),                      //          .data
		.sink1_startofpacket (rsp_demux_023_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_023_src0_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (120),
		.OUT_PKT_RESPONSE_STATUS_L     (119),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (121),
		.OUT_PKT_ORI_BURST_SIZE_H      (123),
		.OUT_ST_DATA_W                 (124),
		.ST_CHANNEL_W                  (24),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                  //       clk.clk
		.reset                (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_003_src_valid),                         //      sink.valid
		.in_channel           (router_003_src_channel),                       //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_003_src_ready),                         //          .ready
		.in_data              (router_003_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (120),
		.IN_PKT_RESPONSE_STATUS_L      (119),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (121),
		.IN_PKT_ORI_BURST_SIZE_H       (123),
		.IN_ST_DATA_W                  (124),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (24),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                  //       clk.clk
		.reset                (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                            //          .ready
		.in_data              (cmd_mux_src_data),                             //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_clk_clk),                                  //        in_clk.clk
		.in_reset          (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (flash_clk_clk_clk),                            //       out_clk.clk
		.out_reset         (qspi_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src7_ready),                     //            in.ready
		.in_valid          (cmd_demux_001_src7_valid),                     //              .valid
		.in_startofpacket  (cmd_demux_001_src7_startofpacket),             //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src7_endofpacket),               //              .endofpacket
		.in_channel        (cmd_demux_001_src7_channel),                   //              .channel
		.in_data           (cmd_demux_001_src7_data),                      //              .data
		.out_ready         (crosser_out_ready),                            //           out.ready
		.out_valid         (crosser_out_valid),                            //              .valid
		.out_startofpacket (crosser_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_out_channel),                          //              .channel
		.out_data          (crosser_out_data),                             //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_clk_clk),                                  //        in_clk.clk
		.in_reset          (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (flash_clk_clk_clk),                            //       out_clk.clk
		.out_reset         (qspi_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src8_ready),                     //            in.ready
		.in_valid          (cmd_demux_001_src8_valid),                     //              .valid
		.in_startofpacket  (cmd_demux_001_src8_startofpacket),             //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src8_endofpacket),               //              .endofpacket
		.in_channel        (cmd_demux_001_src8_channel),                   //              .channel
		.in_data           (cmd_demux_001_src8_data),                      //              .data
		.out_ready         (crosser_001_out_ready),                        //           out.ready
		.out_valid         (crosser_001_out_valid),                        //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_001_out_channel),                      //              .channel
		.out_data          (crosser_001_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_clk_clk),                                  //        in_clk.clk
		.in_reset          (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (flash_clk_clk_clk),                            //       out_clk.clk
		.out_reset         (qspi_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                     //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                     //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),               //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                   //              .channel
		.in_data           (cmd_demux_002_src0_data),                      //              .data
		.out_ready         (crosser_002_out_ready),                        //           out.ready
		.out_valid         (crosser_002_out_valid),                        //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_002_out_channel),                      //              .channel
		.out_data          (crosser_002_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (flash_clk_clk_clk),                            //        in_clk.clk
		.in_reset          (qspi_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                  //       out_clk.clk
		.out_reset         (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                   //              .channel
		.in_data           (rsp_demux_007_src0_data),                      //              .data
		.out_ready         (crosser_003_out_ready),                        //           out.ready
		.out_valid         (crosser_003_out_valid),                        //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_003_out_channel),                      //              .channel
		.out_data          (crosser_003_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (flash_clk_clk_clk),                            //        in_clk.clk
		.in_reset          (qspi_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                  //       out_clk.clk
		.out_reset         (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                   //              .channel
		.in_data           (rsp_demux_008_src0_data),                      //              .data
		.out_ready         (crosser_004_out_ready),                        //           out.ready
		.out_valid         (crosser_004_out_valid),                        //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_004_out_channel),                      //              .channel
		.out_data          (crosser_004_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (124),
		.BITS_PER_SYMBOL     (124),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (flash_clk_clk_clk),                            //        in_clk.clk
		.in_reset          (qspi_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                  //       out_clk.clk
		.out_reset         (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src1_ready),                     //            in.ready
		.in_valid          (rsp_demux_008_src1_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_008_src1_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src1_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_008_src1_channel),                   //              .channel
		.in_data           (rsp_demux_008_src1_data),                      //              .data
		.out_ready         (crosser_005_out_ready),                        //           out.ready
		.out_valid         (crosser_005_out_valid),                        //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_005_out_channel),                      //              .channel
		.out_data          (crosser_005_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                 //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (sam_pwm_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sam_pwm_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sam_pwm_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (quad_encoder_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                         //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (i2c_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (i2c_1_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_1_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_1_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (i2c_3_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_3_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_3_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (i2c_2_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_2_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_2_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (flash_clk_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (qspi_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (qspi_avl_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (qspi_avl_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (qspi_avl_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)        //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (flash_clk_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (qspi_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (qspi_avl_mem_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (qspi_avl_mem_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (qspi_avl_mem_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)        //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (neopixel_0_csr_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (neopixel_0_csr_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (neopixel_0_csr_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tspi_0_d_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (tspi_0_d_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (tspi_0_d_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tspi_1_d_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (tspi_1_d_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (tspi_1_d_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tspi_2_d_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (tspi_2_d_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (tspi_2_d_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tspi_3_d_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (tspi_3_d_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (tspi_3_d_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (tspi_4_d_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (tspi_4_d_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (tspi_4_d_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flash_spi_d_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (flash_spi_d_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (flash_spi_d_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nina_spi_d_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (nina_spi_d_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (nina_spi_d_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sam_pio_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (sam_pio_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (sam_pio_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pex_pio_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (pex_pio_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (pex_pio_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (wm_pio_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (wm_pio_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (wm_pio_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)               //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mb_slv_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (mb_slv_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (mb_slv_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)             //         .error
	);

	MKRVIDOR4000_peripherals_lite_sys_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (NEOPIXEL_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s2_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s2_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s2_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)               //         .error
	);

endmodule
