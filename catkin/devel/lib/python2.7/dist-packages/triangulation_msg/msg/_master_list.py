# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from triangulation_msg/master_list.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class master_list(genpy.Message):
  _md5sum = "7221ac257d3cfe640d16dee9b326535d"
  _type = "triangulation_msg/master_list"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool start_ptp_sync
bool start_burst
bool start_continiouse_mode
uint32 burst_cycles
uint32[] master_id_list
"""
  __slots__ = ['start_ptp_sync','start_burst','start_continiouse_mode','burst_cycles','master_id_list']
  _slot_types = ['bool','bool','bool','uint32','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_ptp_sync,start_burst,start_continiouse_mode,burst_cycles,master_id_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(master_list, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_ptp_sync is None:
        self.start_ptp_sync = False
      if self.start_burst is None:
        self.start_burst = False
      if self.start_continiouse_mode is None:
        self.start_continiouse_mode = False
      if self.burst_cycles is None:
        self.burst_cycles = 0
      if self.master_id_list is None:
        self.master_id_list = []
    else:
      self.start_ptp_sync = False
      self.start_burst = False
      self.start_continiouse_mode = False
      self.burst_cycles = 0
      self.master_id_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3BI().pack(_x.start_ptp_sync, _x.start_burst, _x.start_continiouse_mode, _x.burst_cycles))
      length = len(self.master_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.master_id_list))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.start_ptp_sync, _x.start_burst, _x.start_continiouse_mode, _x.burst_cycles,) = _get_struct_3BI().unpack(str[start:end])
      self.start_ptp_sync = bool(self.start_ptp_sync)
      self.start_burst = bool(self.start_burst)
      self.start_continiouse_mode = bool(self.start_continiouse_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.master_id_list = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3BI().pack(_x.start_ptp_sync, _x.start_burst, _x.start_continiouse_mode, _x.burst_cycles))
      length = len(self.master_id_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.master_id_list.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.start_ptp_sync, _x.start_burst, _x.start_continiouse_mode, _x.burst_cycles,) = _get_struct_3BI().unpack(str[start:end])
      self.start_ptp_sync = bool(self.start_ptp_sync)
      self.start_burst = bool(self.start_burst)
      self.start_continiouse_mode = bool(self.start_continiouse_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.master_id_list = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3BI = None
def _get_struct_3BI():
    global _struct_3BI
    if _struct_3BI is None:
        _struct_3BI = struct.Struct("<3BI")
    return _struct_3BI
