// Generated by gencpp from file triangulation_msg/system_ctl.msg
// DO NOT EDIT!


#ifndef TRIANGULATION_MSG_MESSAGE_SYSTEM_CTL_H
#define TRIANGULATION_MSG_MESSAGE_SYSTEM_CTL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace triangulation_msg
{
template <class ContainerAllocator>
struct system_ctl_
{
  typedef system_ctl_<ContainerAllocator> Type;

  system_ctl_()
    : master_id(0)
    , enable_slave_input(false)
    , trigger_time()  {
    }
  system_ctl_(const ContainerAllocator& _alloc)
    : master_id(0)
    , enable_slave_input(false)
    , trigger_time(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _master_id_type;
  _master_id_type master_id;

   typedef uint8_t _enable_slave_input_type;
  _enable_slave_input_type enable_slave_input;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trigger_time_type;
  _trigger_time_type trigger_time;





  typedef boost::shared_ptr< ::triangulation_msg::system_ctl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::triangulation_msg::system_ctl_<ContainerAllocator> const> ConstPtr;

}; // struct system_ctl_

typedef ::triangulation_msg::system_ctl_<std::allocator<void> > system_ctl;

typedef boost::shared_ptr< ::triangulation_msg::system_ctl > system_ctlPtr;
typedef boost::shared_ptr< ::triangulation_msg::system_ctl const> system_ctlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::triangulation_msg::system_ctl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::triangulation_msg::system_ctl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace triangulation_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'triangulation_msg': ['/home/roboy/BikeToRikshaw/old_git_stuff/multilateral_triangulation/catkin/src/triang_communication/triangulation_msg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::triangulation_msg::system_ctl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::triangulation_msg::system_ctl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulation_msg::system_ctl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulation_msg::system_ctl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulation_msg::system_ctl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulation_msg::system_ctl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::triangulation_msg::system_ctl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2402184671eaa4cfe66017f90187544";
  }

  static const char* value(const ::triangulation_msg::system_ctl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2402184671eaa4cULL;
  static const uint64_t static_value2 = 0xfe66017f90187544ULL;
};

template<class ContainerAllocator>
struct DataType< ::triangulation_msg::system_ctl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "triangulation_msg/system_ctl";
  }

  static const char* value(const ::triangulation_msg::system_ctl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::triangulation_msg::system_ctl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 master_id\n\
bool enable_slave_input\n\
float32[] trigger_time\n\
";
  }

  static const char* value(const ::triangulation_msg::system_ctl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::triangulation_msg::system_ctl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.master_id);
      stream.next(m.enable_slave_input);
      stream.next(m.trigger_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct system_ctl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::triangulation_msg::system_ctl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::triangulation_msg::system_ctl_<ContainerAllocator>& v)
  {
    s << indent << "master_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.master_id);
    s << indent << "enable_slave_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_slave_input);
    s << indent << "trigger_time[]" << std::endl;
    for (size_t i = 0; i < v.trigger_time.size(); ++i)
    {
      s << indent << "  trigger_time[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trigger_time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRIANGULATION_MSG_MESSAGE_SYSTEM_CTL_H
