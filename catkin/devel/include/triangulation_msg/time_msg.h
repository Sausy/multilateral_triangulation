// Generated by gencpp from file triangulation_msg/time_msg.msg
// DO NOT EDIT!


#ifndef TRIANGULATION_MSG_MESSAGE_TIME_MSG_H
#define TRIANGULATION_MSG_MESSAGE_TIME_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace triangulation_msg
{
template <class ContainerAllocator>
struct time_msg_
{
  typedef time_msg_<ContainerAllocator> Type;

  time_msg_()
    : id(0)
    , trigger_time(0)
    , input_trigger_time()  {
    }
  time_msg_(const ContainerAllocator& _alloc)
    : id(0)
    , trigger_time(0)
    , input_trigger_time(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _trigger_time_type;
  _trigger_time_type trigger_time;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _input_trigger_time_type;
  _input_trigger_time_type input_trigger_time;





  typedef boost::shared_ptr< ::triangulation_msg::time_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::triangulation_msg::time_msg_<ContainerAllocator> const> ConstPtr;

}; // struct time_msg_

typedef ::triangulation_msg::time_msg_<std::allocator<void> > time_msg;

typedef boost::shared_ptr< ::triangulation_msg::time_msg > time_msgPtr;
typedef boost::shared_ptr< ::triangulation_msg::time_msg const> time_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::triangulation_msg::time_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::triangulation_msg::time_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace triangulation_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'triangulation_msg': ['/home/roboy/BikeToRikshaw/old_git_stuff/multilateral_triangulation/catkin/src/triang_communication/triangulation_msg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::triangulation_msg::time_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::triangulation_msg::time_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulation_msg::time_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulation_msg::time_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulation_msg::time_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulation_msg::time_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::triangulation_msg::time_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3440e0816b525b8e8331d56821e5953";
  }

  static const char* value(const ::triangulation_msg::time_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3440e0816b525b8ULL;
  static const uint64_t static_value2 = 0xe8331d56821e5953ULL;
};

template<class ContainerAllocator>
struct DataType< ::triangulation_msg::time_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "triangulation_msg/time_msg";
  }

  static const char* value(const ::triangulation_msg::time_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::triangulation_msg::time_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n\
uint8 trigger_time\n\
float32[] input_trigger_time\n\
";
  }

  static const char* value(const ::triangulation_msg::time_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::triangulation_msg::time_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.trigger_time);
      stream.next(m.input_trigger_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct time_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::triangulation_msg::time_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::triangulation_msg::time_msg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "trigger_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger_time);
    s << indent << "input_trigger_time[]" << std::endl;
    for (size_t i = 0; i < v.input_trigger_time.size(); ++i)
    {
      s << indent << "  input_trigger_time[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.input_trigger_time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRIANGULATION_MSG_MESSAGE_TIME_MSG_H
